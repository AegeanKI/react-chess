{"version":3,"sources":["Chess.js","Constant.js","index.js"],"names":["Coord","y","x","this","anotherCoord","times","yInc","xInc","Math","abs","xDis","yDis","Chess","pieceType","pieceColor","alreadyMoved","Pawn","Queen","King","Rock","Bishop","Knight","JSONPiece","Board","data","timestamp","squares","map","row","obj","piece","copyPiece","anotherBoard","thisPiece","anotherPiece","equal","console","log","curPos","isValidCoord","lastMove","getPiece","positions","getCanMovePositionInGeneralRule","updateCanMovePositionInSpecialRule","targetPos","hasPiece","isSamePieceColor","setPiece","isSamePieceType","rowNum","startPos","endPos","usingFirstRule","usingSecondRule","choose","copyBoard","adjustingPieceColor","newPiece","whichSpecialRule","removePiece","dir","minus","div","rockPos","colNum","isUsingSpeicalRule","updateSquaresUsingSpecialRule","setAlreadyMoved","resultBoard","isDoingEnPassant","updateBoardByEnPassant","updateBoardByMoving","addTimestamp","newBoard","updateBoardByPiece","anotherKingPosition","getPieceCanMovePosition","some","ele","directionForKing","direction","add","Piece","maxMultiple","max","board","canMovePositions","forEach","nextPos","mul","canEatPiece","push","yDir","firstCoord","step","secondCoord","leftTopCoord","rightTopCoord","newPosition","slice","directionForRock","directionForBishop","directionForQueen","directionForKnight","filter","mayLoose","getAlreadyMoved","pieceToCheckPositions","xDir","idx","Square","props","className","squareBackgroundColor","onClick","pieceImgSrc","src","alt","stackImgSrc","rowIndicatorValue","colIndicatorValue","ChessBoard","String","fromCharCode","doingEnPassantCoord","doingEnPassantPiece","mayMove","mayMovePosition","tryToMove","usingMask","xEqual","process","Array","renderSquare","React","Component","ChessGame","state","getInitBoard","canMove","nextColor","historyMove","initBoard","fill","piecePos","split","pieceName","coord","setState","sendBoardToServer","length","newMove","socket","sendData","emit","handleDoingEnPassant","handlePieceMoving","handlePieceTryToMove","handleOperationCancel","handleClick","nextProps","prevState","nextCanMove","orderFromServer","boardFromServer","lastMoveFromServer","ConnectToServer","newSocket","io","transports","listenMessage","on","id","JSONDataFromServer","JSONBoardFromServer","JSONLastMoveFromServer","newLastMove","buildLastMoveFromJSON","JSONLastMove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.932a1788.chunk.js","sourcesContent":["import {rowNum, colNum} from './Constant.js';\n\nclass Coord {\n\tconstructor(y, x) {\n\t\tthis.y = y;\n\t\tthis.x = x;\n\t}\n\n\tadd(anotherCoord) {\n\t\treturn new Coord(this.y + anotherCoord.y, this.x + anotherCoord.x);\n\t}\n\n\tminus(anotherCoord) {\n\t\treturn new Coord(this.y - anotherCoord.y, this.x - anotherCoord.x);\n\t}\n\n\tequal(anotherCoord) {\n\t\treturn (anotherCoord !== null && this.y === anotherCoord.y && this.x === anotherCoord.x);\n\t}\n\n\tmul(times) {\n\t\treturn new Coord(this.y * times, this.x * times);\n\t}\n\n\tdiv(times) {\n\t\treturn new Coord(this.y / times, this.x / times);\n\t}\n\n\tstep(yInc, xInc) {\n\t\treturn new Coord(this.y + yInc, this.x + xInc);\n\t}\n\n\txDis(anotherCoord) {\n\t\treturn Math.abs(this.x - anotherCoord.x);\n\t}\n\n\tyDis(anotherCoord) {\n\t\treturn Math.abs(this.y - anotherCoord.y);\n\t}\n\n\txEqual(anotherCoord) {\n\t\treturn this.xDis(anotherCoord) === 0;\n\t}\n\n\tyEqual(anotherCoord) {\n\t\treturn this.yDis(anotherCoord) === 0;\n\t}\n};\n\n\nfunction Chess(pieceType, pieceColor, alreadyMoved=false) {\n  switch (pieceType) {\n    case 'pawn': return new Pawn(pieceColor, alreadyMoved);\n    case 'queen': return new Queen(pieceColor, alreadyMoved);\n    case 'king': return new King(pieceColor, alreadyMoved);\n    case 'rock': return new Rock(pieceColor, alreadyMoved);\n    case 'bishop': return new Bishop(pieceColor, alreadyMoved);\n    case 'knight': return new Knight(pieceColor, alreadyMoved);\n\t\tdefault: \n\t\t\tconst JSONPiece = pieceType;\n\t\t\treturn Chess(JSONPiece.pieceType, JSONPiece.pieceColor, JSONPiece.alreadyMoved);\n  }\n};\n\n\nclass Board {\n\tconstructor(data) {\n\t\tthis.timestamp = data.timestamp ? data.timestamp : 1;\n\t\tif (data.squares) {\n\t\t\tthis.squares = data.squares.map(row => row.map(obj => (obj ? Chess(obj.pieceType, obj.pieceColor, obj.alreadyMoved) : null)));\n\t\t} else {\n\t\t\tthis.squares = data.map(row => row.map(piece => (piece ? piece.copyPiece() : null)));\n\t\t}\n\t}\n\n\tvaleuOf() {\n  \treturn this.timestamp; \n  }\n\n\tcopyBoard() {\n\t\treturn new Board(this);\n\t}\n\n\tequal(anotherBoard) {\n\t\tfor (let y = 0; y < rowNum; y++) {\n\t\t\tfor (let x = 0; x < colNum; x++) {\n\t\t\t\tconst thisPiece = this.squares[y][x];\n\t\t\t\tconst anotherPiece = anotherBoard.squares[y][x];\n\t\t\t\tif ((!thisPiece && !anotherPiece) || \n\t\t\t\t\t\t(thisPiece && anotherPiece && thisPiece.equal(anotherPiece))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconsole.log(\"board is not equal at\", y, x);\n\t\t\t\tconsole.log(\"thisPiece:\", thisPiece);\n\t\t\t\tconsole.log(\"anotherPiece:\", anotherPiece);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tisValidCoord(curPos) {\n\t\treturn (curPos !== null && curPos.y >= 0 && curPos.y < rowNum && curPos.x >= 0 && curPos.x < colNum);\n\t}\n\n\tgetPiece(curPos) {\n\t\tif (this.isValidCoord(curPos)){\n\t\t\treturn this.squares[curPos.y][curPos.x];\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPieceCanMovePosition(curPos, lastMove) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\tconst piece = this.getPiece(curPos);\n\t\t\tconst positions = piece.getCanMovePositionInGeneralRule(curPos, this);\n\t\t\treturn piece.updateCanMovePositionInSpecialRule(curPos, this, positions, lastMove);\n\t\t}\n\t\treturn [];\n\t}\n\n\thasPiece(curPos) { \n\t\tif (this.isValidCoord(curPos)) {\n\t\t\treturn (this.squares[curPos.y][curPos.x] !== null);\n\t\t}\n\t\treturn false;\n\t}\n\n\thasNoPiece(curPos) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\treturn (this.squares[curPos.y][curPos.x] === null);\n\t\t}\n\t\treturn false;\n\t}\n\n\tisSamePieceColor(curPos, targetPos) {\n\t\treturn (this.getPiece(curPos).pieceColor === this.getPiece(targetPos).pieceColor);\n\t}\n\n\tisSamePieceType(curPos, pieceType) {\n\t\treturn (this.getPiece(curPos).pieceType === pieceType);\n\t}\n\n\tcanEatPiece(curPos, targetPos) {\n\t\treturn (this.isValidCoord(targetPos) && this.hasPiece(targetPos) && !this.isSamePieceColor(curPos, targetPos));\n\t}\n\n\tsetPiece(curPos, piece) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\tthis.squares[curPos.y][curPos.x] = piece;\n\t\t}\n\t}\n\n\tremovePiece(curPos) {\n\t\tthis.setPiece(curPos, null);\n\t}\n\n\tisDoingEnPassant(curPos) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\treturn (this.isSamePieceType(curPos, \"pawn\") && (curPos.y === 0 || curPos.y === rowNum - 1));\n\t\t}\n\t\treturn false;\n\t}\n\n\tisUsingSpeicalRule(startPos, endPos) {\n\t\tconst usingFirstRule = (this.isSamePieceType(startPos, \"pawn\") && startPos.xDis(endPos) === 1 && !this.hasPiece(endPos)) ? 1 : null;\n\t\tconst usingSecondRule = (this.isSamePieceType(startPos, \"king\") && startPos.xDis(endPos) === 2) ? 2 : null;\n\t\treturn  (usingFirstRule || usingSecondRule);\n\t}\n\n\tupdateBoardByEnPassant(curPos, choose) {\n\t\tlet copyBoard = this.copyBoard();\n\t\tconst adjustingPieceColor = this.getPiece(curPos).pieceColor;\n\t\tconst newPiece = (choose.yDis(curPos) === 0) ? Chess(\"queen\", adjustingPieceColor) :\n\t\t\t\t\t\t\t\t\t\t (choose.yDis(curPos) === 1) ? Chess(\"knight\", adjustingPieceColor) :\n\t\t\t\t\t\t\t\t\t\t (choose.yDis(curPos) === 2) ? Chess(\"rock\", adjustingPieceColor) :\n\t\t\t\t\t\t\t\t\t\t (choose.yDis(curPos) === 3) ? Chess(\"bishop\", adjustingPieceColor) : null;\n\t\tcopyBoard.setPiece(curPos, newPiece);\n\t\treturn copyBoard;\n\t}\n\n\tupdateSquaresUsingSpecialRule(whichSpecialRule, startPos, endPos) {\n\t\tlet copyBoard = this.copyBoard();\n\t\tif (whichSpecialRule === 1) {\n\t\t\tcopyBoard.removePiece(new Coord(startPos.y, endPos.x));\n\t\t} else if (whichSpecialRule === 2) {\n\t\t\tconst dir = endPos.minus(startPos).div(2);\n\t\t\tconst rockPos = (dir.x > 0 ? new Coord(startPos.y, colNum - 1) : new Coord(startPos.y, 0));\n\t\t\tcopyBoard.setPiece(endPos.minus(dir), this.getPiece(rockPos));\n\t\t\tcopyBoard.removePiece(rockPos);\n\t\t}\n\t\treturn copyBoard;\n\t}\n\n\tupdateBoardByMoving(startPos, endPos) {\n\t\tlet copyBoard = this.copyBoard();\n\t\tconst whichSpecialRule = this.isUsingSpeicalRule(startPos, endPos);\n\t\tif (whichSpecialRule) {\n\t\t\tcopyBoard = this.updateSquaresUsingSpecialRule(whichSpecialRule, startPos, endPos);\n\t\t}\n\t\tcopyBoard.setPiece(endPos, copyBoard.getPiece(startPos));\n\t\tcopyBoard.removePiece(startPos);\n\t\tcopyBoard.getPiece(endPos).setAlreadyMoved();\n\t\treturn copyBoard;\n\t}\n\n\tupdateBoardByPiece(startPos, endPos) {\n\t\tconsole.log('in updateBoardByPiece');\n\t\tconsole.log('before update, timestamp =', this.timestamp);\n\t\tlet resultBoard = null;\n\t\tif (this.isDoingEnPassant(startPos)) {\n\t\t\tresultBoard = this.updateBoardByEnPassant(startPos, endPos);\n\t\t} else {\n\t\t\tresultBoard = this.updateBoardByMoving(startPos, endPos);\n\t\t}\n\t\tresultBoard.addTimestamp();\n\t\tconsole.log('after update, timestamp =', resultBoard.timestamp);\n\t\treturn resultBoard;\n\t}\n\n\tmayLoose(startPos, endPos) {\n\t\tconst newBoard = this.updateBoardByPiece(startPos, endPos);\n\t\tlet anotherKingPosition = null;\n\t\tfor (let y = 0; y < rowNum; y++) {\n\t\t\tfor (let x = 0; x < colNum; x++) {\n\t\t\t\tconst curPos = new Coord(y, x);\n\t\t\t\tif (!newBoard.hasPiece(curPos) || newBoard.isSamePieceColor(endPos, curPos)) continue;\n\t\t\t\tif (newBoard.isSamePieceType(curPos, \"king\")) {\n\t\t\t\t\tanotherKingPosition = curPos;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst mayMovePosition = newBoard.getPieceCanMovePosition(curPos, {\n\t\t\t\t\t\"startPos\": startPos,\n\t\t\t\t\t\"endPos\": endPos,\n\t\t\t\t\t\"piece\": newBoard.getPiece(endPos),\n\t\t\t\t});\n\t\t\t\tif (mayMovePosition.some(ele => ele.equal(endPos))) return true;\n\t\t\t}\n\t\t}\n\n\t\tconst directionForKing = newBoard.getPiece(anotherKingPosition).direction;\n\t\tfor (let dir of directionForKing) {\n\t\t\tconst mayMovePosition = anotherKingPosition.add(dir);\n\t\t\tif (mayMovePosition.equal(endPos)) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\taddTimestamp() {\n\t\tthis.timestamp += 1;\n\t}\n\n};\n\nclass Piece {\n\tconstructor(pieceColor, pieceType, alreadyMoved=false, direction=[], maxMultiple=Math.max(rowNum, colNum)) {\n\t\tthis.pieceColor = pieceColor;\n\t\tthis.pieceType = pieceType;\n\t\tthis.alreadyMoved = alreadyMoved;\n\t\tthis.direction = direction;\n\t\tthis.maxMultiple = maxMultiple;\n\t}\n\n\tequal(anotherPiece) {\n\t\treturn (this.pieceColor === anotherPiece.pieceColor &&\n\t\t\t\t\t\tthis.pieceType === anotherPiece.pieceType &&\n\t\t\t\t\t\tthis.alreadyMoved === anotherPiece.alreadyMoved);\n\t}\n\n\tgetCanMovePositionInGeneralRule(curPos, board) {\n\t\tlet canMovePositions = [];\n\t\tthis.direction.forEach((dir) => {\n\t\t\tfor (let times = 1; times <= this.maxMultiple; times++) {\n\t\t\t\tlet nextPos = curPos.add(dir.mul(times));\n\n\t\t\t\tif (!board.isValidCoord(nextPos)) break;\n\t\t\t\tif (board.hasPiece(nextPos)) {\n\t\t\t\t\tif (board.canEatPiece(curPos, nextPos))\n\t\t\t\t\t\tcanMovePositions.push(nextPos);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcanMovePositions.push(nextPos);\n\t\t\t}\n\t\t});\n\t\treturn canMovePositions;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(curPos, board, positions, lastMove) {\n\t\treturn positions;\n\t}\n\n\tgetAlreadyMoved() {\n\t\treturn this.alreadyMoved;\n\t}\n\n\tsetAlreadyMoved() {\n\t\tthis.alreadyMoved = true;\n\t}\n};\n\nclass Pawn extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tsuper(pieceColor, \"pawn\", alreadyMoved);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Pawn(this.pieceColor, this.alreadyMoved);\n\t}\n\n\tgetCanMovePositionInGeneralRule(curPos, board) {\n\t\tconst startPos = (this.pieceColor === \"white\") ? rowNum - 2 : 1;\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst firstCoord = curPos.step(yDir, 0);\n\t\tconst secondCoord = curPos.step(2 * yDir, 0);\n\t\tlet canMovePositions = [];\n\t\tif (board.isValidCoord(firstCoord) && !board.hasPiece(firstCoord)){\n\t\t\tcanMovePositions.push(firstCoord);\n\t\t}\n\t\tif (curPos.y === startPos && !board.hasPiece(firstCoord) && !board.hasPiece(secondCoord)){\n\t\t\tcanMovePositions.push(secondCoord);\n\t\t}\n\t\treturn canMovePositions;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(curPos, board, positions, lastMove) {\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst leftTopCoord = curPos.step(yDir, 1);\n\t\tconst rightTopCoord = curPos.step(yDir, -1);\n\n\t\tlet newPosition = positions.slice();\n\t\tif (board.canEatPiece(curPos, leftTopCoord)){\n\t\t\tnewPosition.push(leftTopCoord);\n\t\t}\n\t\tif (board.canEatPiece(curPos, rightTopCoord)){\n\t\t\tnewPosition.push(rightTopCoord);\n\t\t}\n\t\tif (lastMove && lastMove.piece.pieceType === \"pawn\" &&\n\t\t    lastMove.startPos.yDis(lastMove.endPos) === 2 &&\n\t\t\t\tlastMove.startPos.xDis(curPos) === 1 &&\n\t\t\t\tlastMove.endPos.yDis(curPos) === 0) {\n\t\t\tnewPosition.push(new Coord(curPos.y + yDir, lastMove.startPos.x));\n\t\t}\n\t\treturn newPosition;\n\t}\n};\n\nclass Rock extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForRock = [new Coord(1, 0), new Coord(0, 1), new Coord(-1, 0), new Coord(0, -1)];\n\t\tsuper(pieceColor, \"rock\", alreadyMoved, directionForRock);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Rock(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass Bishop extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForBishop = [new Coord(1, 1), new Coord(1, -1), new Coord(-1, 1), new Coord(-1, -1)];\n\t\tsuper(pieceColor, \"bishop\", alreadyMoved, directionForBishop);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Bishop(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass Queen extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForQueen = [new Coord(1, 0), new Coord(0, 1), new Coord(-1, 0), new Coord(0, -1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new Coord(1, 1), new Coord(1, -1), new Coord(-1, 1), new Coord(-1, -1)];\n\t\tsuper(pieceColor, \"queen\", alreadyMoved, directionForQueen);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Queen(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass Knight extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForKnight = [new Coord(2, 1), new Coord(-2, 1), new Coord(2, -1), new Coord(-2, -1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew Coord(1, 2), new Coord(1, -2), new Coord(-1, 2), new Coord(-1, -2)];\n\t\tsuper(pieceColor, \"knight\", alreadyMoved, directionForKnight, 1);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Knight(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass King extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForKing = [new Coord(1, 1), new Coord(-1, 1), new Coord(1, -1), new Coord(-1, -1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew Coord(1, 0), new Coord(0, -1), new Coord(-1, 0), new Coord(0, 1)];\n\t\tsuper(pieceColor, \"king\", alreadyMoved, directionForKing, 1);\n\t}\n\n\tcopyPiece() {\n\t\treturn new King(this.pieceColor, this.alreadyMoved);\n\t}\n\n\tupdateCanMovePositionInSpecialRule(curPos, board, positions, lastMove) {\n\t\tpositions = positions.filter(endPos => !board.mayLoose(curPos, endPos));\n\n\t\tif (!board.getPiece(curPos).getAlreadyMoved()) {\n\t\t\tconst pieceToCheckPositions = [new Coord(curPos.y, 0), new Coord(curPos.y, colNum - 1)];\n\t\t\tconst xDir = [new Coord(0, -1), new Coord(0, 1)];\n\t\t\tpieceToCheckPositions.forEach((rockPos, idx) => {\n\t\t\t\tif (board.hasPiece(rockPos) && board.isSamePieceType(rockPos, \"rock\") && !board.getPiece(rockPos).getAlreadyMoved()) {\n\t\t\t\t\tfor (let nextPos = curPos.add(xDir[idx]); !rockPos.equal(nextPos); nextPos = nextPos.add(xDir[idx])) {\n\t\t\t\t\t\tif (board.hasPiece(nextPos)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (board.mayLoose(curPos, curPos.add(xDir[idx]), lastMove) ||\n\t\t\t\t\t\t\tboard.mayLoose(curPos, curPos.add(xDir[idx].mul(2)), lastMove)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tpositions.push(curPos.add(xDir[idx].mul(2)));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn positions;\n\t}\n}\n\nexport {Coord, Chess, Board}","const rowNum = 8, colNum = 8;\nexport {rowNum, colNum};","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport io from \"socket.io-client\";\nimport \"./index.css\";\nimport {Coord, Chess, Board} from \"./Chess.js\";\nimport {rowNum, colNum} from \"./Constant.js\";\n\nfunction Square(props) {\n\tconst className = \"square \" + props.squareBackgroundColor;\n\n\treturn (\n\t\t<button className={className} onClick={props.onClick}>\n\t\t\t{props.pieceImgSrc ? <img src={props.pieceImgSrc} alt={props.pieceImgSrc} /> : null}\n\t\t\t{props.stackImgSrc ? <img className=\"stack-image\" src={props.stackImgSrc} alt={props.stackImgSrc} /> : null}\n\t\t\t{props.rowIndicatorValue ? <p className=\"row-indicator\">{props.rowIndicatorValue}</p> : null}\n\t\t\t{props.colIndicatorValue ? <p className=\"col-indicator\">{props.colIndicatorValue}</p> : null}\n\t\t</button>\n\t);\n}\n\nclass ChessBoard extends React.Component {\n\trenderSquare(curPos) {\n\t\tconst idx = curPos.y * colNum + curPos.x;\n\t\tconst rowIndicatorValue = (curPos.x === 0) ? rowNum - curPos.y : null;\n\t\tconst colIndicatorValue = (curPos.y === colNum - 1) ? String.fromCharCode(97 + curPos.x) : null;\n\n\t\tconst doingEnPassantCoord = this.props.doingEnPassantCoord;\n\t\tconst piece = this.props.board.getPiece(curPos);\n\t\tconst doingEnPassantPiece = this.props.board.getPiece(doingEnPassantCoord);\n\t\tconst mayMove = this.props.mayMovePosition.some(ele => ele.equal(curPos));\n\t\tconst squareBackgroundColor = curPos.equal(doingEnPassantCoord) ? \"orange-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  curPos.equal(this.props.tryToMove) ? \"yellow-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (curPos.y + curPos.x)  % 2 === 0 ? \"black-square\" : \"white-square\";\n\t\tconst usingMask = (doingEnPassantCoord && curPos.xEqual(doingEnPassantCoord) && curPos.yDis(doingEnPassantCoord) < 4) ? \"light-mask\" :\n\t\t\t\t\t\t\t\t\t\t  (doingEnPassantCoord && !curPos.equal(doingEnPassantCoord)) ? \"dark-mask\" : null;\n\t\tconst stackImgSrc = (mayMove && piece && piece.pieceType) ? process.env.PUBLIC_URL + \"/circle.png\" :\n\t\t\t\t\t\t\t\t\t\t\t  (mayMove) ? process.env.PUBLIC_URL + \"/dot.png\" : \n\t\t\t\t\t\t\t\t\t\t\t  (usingMask) ? process.env.PUBLIC_URL + \"/\" + usingMask + \".png\" : null;\n\t\tconst pieceImgSrc = (usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 0) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-queen.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 1) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-knight.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 2) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-rock.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 3) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-bishop.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(piece) ? process.env.PUBLIC_URL + \"/\" + piece.pieceColor + \"-\" + piece.pieceType + \".png\" : null;\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tkey={idx}\n\t\t\t\trowIndicatorValue={rowIndicatorValue}\n\t\t\t\tcolIndicatorValue={colIndicatorValue}\n\t\t\t\tpieceImgSrc={pieceImgSrc}\n\t\t\t\tstackImgSrc={stackImgSrc}\n\t\t\t\tsquareBackgroundColor={squareBackgroundColor}\n\t\t\t\tmayMove={mayMove}\n\t\t\t\tusingMask={usingMask}\n\t\t\t\tonClick={() => this.props.onClick(curPos)}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"chess-board-container\">\n\t\t\t\t{[...Array(rowNum)].map((ele, y) =>\n\t\t\t\t\t<div className=\"chess-board-row\" key={y}>\n\t\t\t\t\t\t{[...Array(colNum)].map((ele, x) => \n\t\t\t\t\t\t\tthis.renderSquare(new Coord(y, x))\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nclass ChessGame extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tboard: new Board(this.getInitBoard()),\n\t\t\tcanMove: null,\n\t\t\tnextColor: \"white\",\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t\thistoryMove: [],\n\t\t\tdoingEnPassantCoord: null,\n\t\t};\n\t}\n\n\tgetInitBoard() {\n\t\tlet initBoard = Array(rowNum).fill(0).map(x => Array(colNum).fill(null));\n\t\tconst piecePos = \"rock knight bishop queen king bishop knight rock\".split(\" \");\n\t\tinitBoard[0] = piecePos.map((pieceName) => Chess(pieceName, \"black\"));\n\t\tinitBoard[1] = [...Array(colNum)].map((ele) => Chess(\"pawn\", \"black\"));\n\t\tinitBoard[rowNum - 2] = [...Array(colNum)].map((ele) => Chess(\"pawn\", \"white\"));\n\t\tinitBoard[rowNum - 1] = piecePos.map((pieceName) => Chess(pieceName, \"white\"));\n\t\treturn initBoard;\n\t}\n\n\thandleDoingEnPassant(coord) {\n\t\tconst doingEnPassantCoord = this.state.doingEnPassantCoord;\n\t\tif (Math.abs(doingEnPassantCoord.y - coord.y) >= 4 || doingEnPassantCoord.x !== coord.x) {\n\t\t\treturn;\n\t\t}\n\t\tconst newBoard = this.state.board.updateBoardByPiece(doingEnPassantCoord, coord);\n\t\t\t// historyMove.push({\n\t\t\t// });\n\t\tthis.setState({\n\t\t\tboard: newBoard,\n\t\t\tdoingEnPassantCoord: null,\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t});\n\t\tconst historyMove = this.state.historyMove.slice();\n\n\t\tthis.sendBoardToServer(newBoard, historyMove[historyMove.length - 1]);\n\t}\n\n\thandlePieceMoving(coord) {\n\t\tconst historyMove = this.state.historyMove.slice();\n\t\tconsole.log('while moving');\n\t\tconsole.log('before update board, timestamp =', this.state.board.timestamp);\n\t\tconst newBoard = this.state.board.updateBoardByPiece(this.state.tryToMove, coord);\n\t\tconsole.log('after update board, timestamp =', newBoard.timestamp);\n\t\tconst newMove = {\n\t\t\t\"startPos\": this.state.tryToMove,\n\t\t\t\"endPos\": coord,\n\t\t\t\"piece\": newBoard.getPiece(coord),\n\t\t};\n\t\thistoryMove.push(newMove);\n\n\t\tthis.setState({\n\t\t\tboard: newBoard,\n\t\t\tnextColor: (this.state.nextColor === \"black\" ? \"white\" : \"black\"),\n\t\t\thistoryMove: historyMove,\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t});\n\n\n\t\tif (newBoard.isDoingEnPassant(coord)) {\n\t\t\tthis.setState({\n\t\t\t\tdoingEnPassantCoord: coord\n\t\t\t});\n\t\t} else {\n\t\t\tthis.sendBoardToServer(newBoard, newMove);\n\t\t}\n\t}\n\n\thandlePieceTryToMove(coord) {\n\t\tconst board = this.state.board;\n\t\tconst historyMove = this.state.historyMove.slice();\n\t\tconst mayMovePosition = board.getPieceCanMovePosition(coord, historyMove[historyMove.length - 1]);\n\t\tthis.setState({\n\t\t\ttryToMove: coord,\n\t\t\tmayMovePosition: mayMovePosition,\n\t\t});\n\n\t\t// this.sendBoardToServer(null);\n\t}\n\n\thandleOperationCancel(coord) {\n\t\tthis.setState({\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t});\n\n\t\t// this.sendBoardToServer(null);\n\t}\n\n\tsendBoardToServer(board, lastMove) {\n\t\tconst socket = this.props.socket;\n\t\tif (socket && board) {\n\t\t\tconst sendData = {\n\t\t\t\tboard: board,\n\t\t\t\tlastMove: lastMove\n\t\t\t};\n\t\t\tconsole.log('send to server', sendData);\n\t\t\tsocket.emit(\"sendToSameRoom\", sendData);\n\t\t}\n\t}\n\n\thandleClick(coord) {\n\t\t// console.log(\"canMove is\", this.state.canMove);\n\t\t// console.log(\"nextColor is\", this.state.nextColor);\n\t\tif (this.state.doingEnPassantCoord) {\n\t\t\tthis.handleDoingEnPassant(coord);\n\t\t} else if (this.state.mayMovePosition.some(ele => ele.equal(coord))) {\n\t\t\tthis.handlePieceMoving(coord);\n\t\t} else if (this.state.board.hasPiece(coord) && this.state.board.getPiece(coord).pieceColor === this.state.nextColor && this.state.nextColor === this.state.canMove) {\n\t\t// } else if (this.state.board.hasPiece(coord) && this.state.board.getPiece(coord).pieceColor === this.state.nextColor) {\n\t\t\tthis.handlePieceTryToMove(coord);\n\t\t} else {\n\t\t\tthis.handleOperationCancel(coord);\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps, prevState) {\n\t\tconst nextCanMove = nextProps.orderFromServer === 0 ? \"white\" : \n\t\t\t\t\t\t\t\t\t\t\t\tnextProps.orderFromServer === 1 ? \"black\" : null;\n\t\tif (nextCanMove !== prevState.canMove) {\n\t\t\tconsole.log('set canMove:', nextCanMove);\n\t\t\treturn {\n\t\t\t\tcanMove: nextCanMove\n\t\t\t}\n\t\t}\n\n\t\tif (nextProps.boardFromServer &&\n\t\t\t  nextProps.boardFromServer.timestamp > prevState.board.timestamp &&\n\t\t\t\tprevState.nextColor !== nextCanMove) {\n\t\t\tconsole.log('set board:', nextProps.boardFromServer);\n\t\t\tlet historyMove = prevState.historyMove.slice();\n\t\t\thistoryMove.push(nextProps.lastMoveFromServer);\n\t\t\treturn {\n\t\t\t\tboard: nextProps.boardFromServer,\n\t\t\t\thistoryMove: historyMove,\n\t\t\t\tnextColor: (prevState.nextColor === \"black\" ? \"white\" : \"black\"),\n\t\t\t}\n\t\t} else {\n\t\t\t// console.log('get board props but not set');\n\t\t\t// console.log('nextProps.boardFromServer:', nextProps.boardFromServer);\n\t\t\t// console.log('prevState.board', prevState.board);\n\t\t\t// console.log('prevState.nextColor', prevState.nextColor);\n\t\t\t// console.log('nextCanMove', nextCanMove);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trender() {\n\t\tconsole.log('re rendering, this.state.board.timestamp:', this.state.board.timestamp);\n\t\treturn (\n\t\t\t<div className=\"chess-game-container\">\n\t\t\t\t<ChessBoard\n\t\t\t\t\tboard={this.state.board}\n\t\t\t\t\tonClick={(coord) => this.handleClick(coord)}\n\t\t\t\t\ttryToMove={this.state.tryToMove}\n\t\t\t\t\tmayMovePosition={this.state.mayMovePosition}\n\t\t\t\t\tdoingEnPassantCoord={this.state.doingEnPassantCoord}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nclass ConnectToServer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst newSocket = io(\"http://localhost:3000\", { transports: [\"websocket\", \"polling\", \"flashsocket\"] });\n\t\tthis.state = {\n\t\t\tsocket: newSocket\n\t\t};\n\t\tthis.listenMessage(newSocket);\n\t}\n\n\tlistenMessage(socket) {\n\t\tif (!socket) return;\n\n\t\tsocket.on(\"connect\", () => {\n\t\t\tconsole.log(\"success connect:\", socket.id);\n\t\t});\n\n\t\tsocket.on(\"sendToSameRoom\", JSONDataFromServer => {\n\t\t\t// console.log('receive data', JSONDataFromServer);\n\t\t\tconst JSONBoardFromServer = JSONDataFromServer.board;\n\t\t\tconst JSONLastMoveFromServer = JSONDataFromServer.lastMove;\n\t\t\tif (this.state.board && JSONBoardFromServer.timestamp <= this.state.board.timestamp) return;\n\n\t\t\tconsole.log('set boardFromServer:', JSONBoardFromServer);\n\t\t\tconst newBoard = new Board(JSONBoardFromServer);\n\t\t\tlet newLastMove = this.buildLastMoveFromJSON(JSONLastMoveFromServer);\n\t\t\t// console.log(newLastMove);\n\t\t\tthis.setState({\n\t\t\t\tboardFromServer: newBoard,\n\t\t\t\tlastMoveFromServer: newLastMove\n\t\t\t});\n\t\t});\n\n\t\tsocket.on(\"setUserOrderInRoom\", orderFromServer => {\n\t\t\tif (orderFromServer === this.state.orderFromServer) return;\n\n\t\t\tconsole.log('set orderFromServer:', orderFromServer);\n\t\t\tthis.setState({\n\t\t\t\torderFromServer: orderFromServer\n\t\t\t});\n\t\t})\n\t};\n\n\tbuildLastMoveFromJSON(JSONLastMove) {\n\t\tlet lastMove = JSONLastMove;\n\t\tlastMove.piece = Chess(lastMove.piece);\n\t\tlastMove.endPos = new Coord(lastMove.endPos.y, lastMove.endPos.x);\n\t\tlastMove.startPos = new Coord(lastMove.startPos.y, lastMove.startPos.x);\n\t\treturn lastMove;\n\t}\n\t// shouldComponentUpdate(nextProps, nextState) {\n\t// \treturn (nextState.socket && nextState.orderFromServer);\n\t// }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game-container\">\n\t\t\t\t<ChessGame\n\t\t\t\t\tsocket={this.state.socket}\n\t\t\t\t\torderFromServer={this.state.orderFromServer}\n\t\t\t\t\tboardFromServer={this.state.boardFromServer}\n\t\t\t\t\tlastMoveFromServer={this.state.lastMoveFromServer}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n};\n\n\nReactDOM.render(\n\t// <Game />,\n\t<ConnectToServer />,\n\tdocument.getElementById(\"root\")\n);"],"sourceRoot":""}