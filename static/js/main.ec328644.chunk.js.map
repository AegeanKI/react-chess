{"version":3,"sources":["index.js"],"names":["Coord","y","x","getInitSquares","initSquares","Array","fill","map","ele","i","forEach","coord","Pawn","rowNum","colNum","Rock","Knight","Bishop","Queen","King","Piece","pieceColor","pieceType","direction","maxMultiple","Math","max","this","moved","squares","isValidCoord","hasPiece","isSamePieceColor","canMovePositions","dir","times","nextCoord","canEatPiece","push","lastMove","positions","getCanMovePositionInGeneralRule","updateCanMovePositionInSpecialRule","startPos","endPos","choose","BeforeSquares","arr","slice","isUsingSpeicalRule","updateSquaresUsingSpecialRule","console","log","yDir","firstCoord","secondCoord","leftTopCoord","rightTopCoord","piece","abs","newPiece","nextSquares","anotherKingPosition","getCanMovePosition","some","length","mayMovePosition","filter","mayLoose","pieceToCheckPositions","xDir","idx","rockCoord","Square","className","props","squareBackgroundColor","onClick","pieceImgSrc","src","alt","stackImgSrc","rowIndicatorValue","colIndicatorValue","React","Component","Board","doingEnPassantCoord","doingEnPassantPiece","mayMove","tryToMove","usingMask","process","String","fromCharCode","renderSquare","Game","state","nextColor","historyMove","updateSquaresUsingEnPassant","setState","updateSquares","tryToEnPassant","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec328644.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst rowNum = 8, colNum = 8;\n\nfunction Coord (y, x) {\n\treturn { \"y\": y, \"x\": x }\n}\n\nfunction getInitSquares() {\n\tlet initSquares = Array(rowNum).fill(0).map(x => Array(colNum).fill(null));\n\n\tconst blackPawnPositions = [...Array(colNum)].map((ele, i) => Coord(1, i));\n\tblackPawnPositions.forEach((coord, i) => initSquares[coord.y][coord.x] = new Pawn(\"black\"));\n\tconst whitePawnPositions = [...Array(colNum)].map((ele, i) => Coord(rowNum - 2, i));\n\twhitePawnPositions.forEach((coord, i) => initSquares[coord.y][coord.x] = new Pawn(\"white\"));\n\n\tconst blackRockPosition = [Coord(0, 0), Coord(0, colNum - 1), Coord(rowNum - 1, 0), Coord(rowNum - 1, colNum - 1)];\n\tblackRockPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Rock(\"black\"));\n\tconst whiteRockPosition = [Coord(rowNum - 1, 0), Coord(rowNum - 1, colNum - 1)];\n\twhiteRockPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Rock(\"white\"));\n\n\tconst blackKnightPosition = [Coord(0, 1), Coord(0, colNum - 2)];\n\tblackKnightPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Knight(\"black\"));\n\tconst whiteKnightPosition = [Coord(rowNum - 1, 1), Coord(rowNum - 1, colNum - 2)];\n\twhiteKnightPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Knight(\"white\"));\n\n\tconst blackBishopPosition = [Coord(0, 2), Coord(0, colNum - 3)];\n\tblackBishopPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Bishop(\"black\"));\n\tconst whiteBishopPosition = [Coord(rowNum - 1, 2), Coord(rowNum - 1, colNum - 3)];\n\twhiteBishopPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Bishop(\"white\"));\n\n\tconst blackQueenPosition = [Coord(0, 3)];\n\tblackQueenPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Queen(\"black\"));\n\tconst whiteQueenPosition = [Coord(rowNum - 1, 3)];\n\twhiteQueenPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Queen(\"white\"));\n\n\tconst blackKingPosition = [Coord(0, 4)];\n\tblackKingPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new King(\"black\"));\n\tconst whiteKingPosition = [Coord(rowNum - 1, 4)];\n\twhiteKingPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new King(\"white\"));\n\n\treturn initSquares;\n}\n\nclass Piece {\n\tconstructor(pieceColor, pieceType, direction=[], maxMultiple=Math.max(rowNum, colNum)) {\n\t\tthis.pieceColor = pieceColor;\n\t\tthis.pieceType = pieceType;\n\t\tthis.moved = false;\n\t\tthis.direction = direction;\n\t\tthis.maxMultiple = maxMultiple;\n\t}\n\n\thasPiece(coord, squares) { \n\t\treturn squares[coord.y][coord.x];\n\t}\n\n\tisValidCoord(coord) {\n\t\treturn (coord.y >= 0 && coord.y < rowNum && coord.x >= 0 && coord.x < colNum);\n\t}\n\n\tisSamePieceColor(coord, squares) {\n\t\treturn (squares[coord.y][coord.x].pieceColor === this.pieceColor);\n\t}\n\n\tcanEatPiece(coord, squares) {\n\t\treturn (this.isValidCoord(coord) && this.hasPiece(coord, squares) && !this.isSamePieceColor(coord, squares))\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tlet canMovePositions = [];\n\t\tthis.direction.forEach((dir) => {\n\t\t\tfor (let times = 1; times <= this.maxMultiple; times++) {\n\t\t\t\tlet nextCoord = Coord(coord.y + times * dir[0], coord.x + times * dir[1]);\n\n\t\t\t\tif (!this.isValidCoord(nextCoord)) break;\n\t\t\t\tif (this.hasPiece(nextCoord, squares)) {\n\t\t\t\t\tif (this.canEatPiece(nextCoord, squares))\n\t\t\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t\t}\n\t\t});\n\t\treturn canMovePositions;\n\t}\n\n\tgetCanMovePosition(coord, squares, lastMove) {\n\t\tlet positions = this.getCanMovePositionInGeneralRule(coord, squares);\n\t\tpositions = this.updateCanMovePositionInSpecialRule(coord, squares, positions, lastMove);\n\n\t\treturn positions;\n\t}\n\n\ttryToEnPassant(coord) { return false; }\n\tisUsingSpeicalRule(squares, startPos, endPos) { return false; }\n\tupdateCanMovePositionInSpecialRule(coord, squares, positions) { return positions; }\n\tupdateSquaresUsingSpecialRule(squares, startPos, endPos) { return squares; }\n\tupdateSquaresUsingEnPassant(squares, coord, choose) { return squares; }\n\tupdateSquares(BeforeSquares, startPos, endPos) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tif (squares[startPos.y][startPos.x].isUsingSpeicalRule(squares, startPos, endPos))\n\t\t\tsquares = squares[startPos.y][startPos.x].updateSquaresUsingSpecialRule(squares, startPos, endPos);\n\n\t\tsquares[endPos.y][endPos.x] = squares[startPos.y][startPos.x];\n\t\tsquares[startPos.y][startPos.x] = null;\n\t\tsquares[endPos.y][endPos.x].moved = true;\n\n\t\tif (BeforeSquares[startPos.y][startPos.x] === null)\n\t\t\tconsole.log(\"something wrong\");\n\n\t\treturn squares;\n\t}\n};\n\nclass Pawn extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"pawn\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst startPos = (this.pieceColor === \"white\") ? rowNum - 2 : 1;\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst firstCoord = Coord(coord.y + yDir, coord.x);\n\t\tconst secondCoord = Coord(coord.y + 2 * yDir, coord.x);\n\t\tlet canMovePositions = [];\n\t\tif (super.isValidCoord(firstCoord) && !super.hasPiece(firstCoord, squares))\n\t\t\tcanMovePositions.push(firstCoord);\n\t\tif (coord.y === startPos && !super.hasPiece(firstCoord, squares) && !super.hasPiece(secondCoord, squares))\n\t\t\tcanMovePositions.push(secondCoord);\n\n\t\treturn canMovePositions;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(coord, squares, positions, lastMove) {\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst leftTopCoord = Coord(coord.y + yDir, coord.x + 1);\n\t\tconst rightTopCoord = Coord(coord.y + yDir, coord.x - 1);\n\n\t\tif (super.canEatPiece(leftTopCoord, squares))\n\t\t\tpositions.push(leftTopCoord);\n\t\tif (super.canEatPiece(rightTopCoord, squares))\n\t\t\tpositions.push(rightTopCoord);\n\n\t\tif (lastMove && lastMove.piece.pieceType === \"pawn\" && Math.abs(lastMove.startPos.y - lastMove.endPos.y) === 2 &&\n\t\t\t\tMath.abs(lastMove.startPos.x - coord.x) === 1 && lastMove.endPos.y === coord.y) {\n\t\t\tpositions.push(Coord(coord.y + yDir, lastMove.startPos.x));\n\t\t}\n\n\t\treturn positions;\n\t}\n\n\tisUsingSpeicalRule(squares, startPos, endPos) {\n\t\treturn (squares[startPos.y][startPos.x].pieceType === \"pawn\" && Math.abs(startPos.x - endPos.x) === 1 && squares[endPos.y][endPos.x] === null);\n\t}\n\n\tupdateSquaresUsingSpecialRule(BeforeSquares, startPos, endPos) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tsquares[startPos.y][endPos.x] = null;\n\t\treturn squares;\n\t}\n\n\ttryToEnPassant(coord) { \n\t\treturn (coord.y === 0 || coord.y === rowNum - 1);\n\t}\n\n\tupdateSquaresUsingEnPassant(BeforeSquares, coord, choose) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tconst newPiece = (choose.y === coord.y) ? new Queen(this.pieceColor) :\n\t\t\t\t\t\t\t\t\t\t (Math.abs(choose.y - coord.y) === 1) ? new Knight(this.pieceColor) :\n\t\t\t\t\t\t\t\t\t\t (Math.abs(choose.y - coord.y) === 2) ? new Rock(this.pieceColor) :\n\t\t\t\t\t\t\t\t\t\t (Math.abs(choose.y - coord.y) === 3) ? new Bishop(this.pieceColor) : null;\n\t\tsquares[coord.y][coord.x] = newPiece;\n\t\treturn squares;\n\t}\n};\n\nclass Rock extends Piece {\n\tconstructor(pieceColor) {\n\t\tconst directionForRock = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n\t\tsuper(pieceColor, \"rock\", directionForRock);\n\t}\n}\n\nclass Bishop extends Piece {\n\tconstructor(pieceColor) {\n\t\tconst directionForBishop = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\n\t\tsuper(pieceColor, \"bishop\", directionForBishop);\n\t}\n}\n\nclass Queen extends Piece {\n\tconstructor(pieceColor) {\n\t\tconst directionForQueen = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n\t\tsuper(pieceColor, \"queen\", directionForQueen);\n\t}\n}\n\nclass Knight extends Piece {\n\tconstructor(pieceColor) {\n\t\tconst directionForKnight = [[2, 1], [-2, 1], [2, -1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n\t\tsuper(pieceColor, \"knight\", directionForKnight, 1);\n\t}\n}\n\nclass King extends Piece {\n\tconstructor(pieceColor) {\n\t\tconst directionForKing = [[1, 1], [-1, 1], [1, -1], [-1, -1], [1, 0], [0, -1], [-1, 0], [0, 1]];\n\t\tsuper(pieceColor, \"king\", directionForKing, 1);\n\t}\n\n\tmayLoose(squares, startPos, endPos, lastMove) {\n\t\tconst nextSquares = super.updateSquares(squares, startPos, endPos);\n\t\tlet anotherKingPosition = null;\n\t\tfor (let y = 0; y < rowNum; y++) {\n\t\t\tfor (let x = 0; x < colNum; x++) {\n\t\t\t\tif (!nextSquares[y][x] || super.isSamePieceColor(Coord(y, x), nextSquares)) continue;\n\t\t\t\tif (nextSquares[y][x].pieceType === \"king\") {\n\t\t\t\t\tanotherKingPosition = Coord(y, x);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst mayMovePosition = nextSquares[y][x].getCanMovePosition(Coord(y, x), nextSquares, {\n\t\t\t\t\t\"startPos\": startPos,\n\t\t\t\t\t\"endPos\": endPos,\n\t\t\t\t\t\"piece\": nextSquares[endPos.y][endPos.x],\n\t\t\t\t});\n\t\t\t\tif (mayMovePosition.some(ele => ele.y === endPos.y && ele.x === endPos.x)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < this.direction.length; i++) {\n\t\t\tconst mayMovePosition = Coord(anotherKingPosition.y + this.direction[i][0], anotherKingPosition.x + this.direction[i][1]);\n\t\t\tif (mayMovePosition.y === endPos.y && mayMovePosition.x === endPos.x)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(coord, squares, positions, lastMove) {\n\t\tpositions = positions.filter(endPos => !this.mayLoose(squares, coord, endPos, lastMove));\n\n\t\tif (!super.moved) {\n\t\t\tconst pieceToCheckPositions = [Coord(coord.y, 0), Coord(coord.y, colNum - 1)];\n\t\t\tconst xDir = [-1, 1];\n\t\t\tpieceToCheckPositions.forEach((ele, idx) => {\n\t\t\t\tconst piece = squares[ele.y][ele.x];\n\t\t\t\tif (piece && piece.pieceType === \"rock\" && !piece.moved) {\n\t\t\t\t\tfor (let i = Coord(coord.y, coord.x + xDir[idx]); i.y !== ele.y || i.x !== ele.x; i = Coord(i.y, i.x + xDir[idx]))\n\t\t\t\t\t\tif (super.hasPiece(i, squares)) return;\n\t\t\t\t\tif (this.mayLoose(squares, coord, Coord(coord.y, coord.x + xDir[idx]), lastMove) || this.mayLoose(squares, coord, Coord(coord.y, coord.x + 2 * xDir[idx]), lastMove)) return;\n\t\t\t\t\t\n\t\t\t\t\tpositions.push(Coord(coord.y, coord.x + 2 * xDir[idx]));\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\treturn positions;\n\t}\n\n\tisUsingSpeicalRule(squares, startPos, endPos) {\n\t\treturn (squares[startPos.y][startPos.x].pieceType === \"king\" && Math.abs(startPos.x - endPos.x) === 2);\n\t}\n\n\tupdateSquaresUsingSpecialRule(BeforeSquares, startPos, endPos) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tconst xDir = (endPos.x - startPos.x) / 2;\n\t\tconst rockCoord = (xDir > 0 ? Coord(startPos.y, colNum - 1) : Coord(startPos.y, 0));\n\t\tsquares[startPos.y][endPos.x - xDir] = squares[rockCoord.y][rockCoord.x];\n\t\tsquares[rockCoord.y][rockCoord.x] = null;\n\t\treturn squares;\n\t}\n}\n\nclass Square extends React.Component {\n\trender() {\n\t\tconst className = \"square \" + this.props.squareBackgroundColor;\n\n\t\treturn (\n\t\t\t<button className={className} onClick={() => this.props.onClick()}>\n\t\t\t\t{this.props.pieceImgSrc ? <img src={this.props.pieceImgSrc} alt={this.props.pieceImgSrc} /> : null}\n\t\t\t\t{this.props.stackImgSrc ? <img className=\"stack-image\" src={this.props.stackImgSrc} alt={this.props.stackImgSrc} /> : null}\n\t\t\t\t{this.props.rowIndicatorValue ? <p className=\"row-indicator\">{this.props.rowIndicatorValue}</p> : null}\n\t\t\t\t{this.props.colIndicatorValue ? <p className=\"col-indicator\">{this.props.colIndicatorValue}</p> : null}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nclass Board extends React.Component {\n\trenderSquare(coord) {\n\t\tconst idx = coord.y * colNum + coord.x;\n\t\tconst piece = this.props.squares[coord.y][coord.x];\n\t\tconst doingEnPassantCoord = this.props.doingEnPassantCoord;\n\t\tconst doingEnPassantPiece = doingEnPassantCoord ? this.props.squares[doingEnPassantCoord.y][doingEnPassantCoord.x] : null;\n\t\tconst mayMove = this.props.mayMovePosition.some(ele => ele.y === coord.y && ele.x === coord.x);\n\t\tconst squareBackgroundColor = (doingEnPassantCoord && coord.x === doingEnPassantCoord.x && coord.y === doingEnPassantCoord.y) ? \"orange-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (idx === this.props.tryToMove) ? \"yellow-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ((coord.y + coord.x)  % 2 === 0) ? \"black-square\" : \"white-square\";\n\t\tconst usingMask = (doingEnPassantCoord && coord.x === doingEnPassantCoord.x && Math.abs(coord.y - doingEnPassantCoord.y) < 4) ? \"light-mask\" :\n\t\t\t\t\t\t\t\t\t\t  (doingEnPassantCoord && (coord.x !== doingEnPassantCoord.x || coord.y !== doingEnPassantCoord.y)) ? \"dark-mask\" : null;\n\t\tconst stackImgSrc = (mayMove && piece && piece.pieceType) ? process.env.PUBLIC_URL + \"/circle.png\" :\n\t\t\t\t\t\t\t\t\t\t\t  (mayMove) ? process.env.PUBLIC_URL + \"/dot.png\" : \n\t\t\t\t\t\t\t\t\t\t\t  (usingMask) ? process.env.PUBLIC_URL + \"/\" + usingMask + \".png\" : null;\n\n\t\tconst pieceImgSrc = (usingMask === \"light-mask\" && squareBackgroundColor === \"orange-square\") ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-queen.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && Math.abs(coord.y - doingEnPassantCoord.y) === 1) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-knight.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && Math.abs(coord.y - doingEnPassantCoord.y) === 2) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-rock.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && Math.abs(coord.y - doingEnPassantCoord.y) === 3) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-bishop.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(piece) ? process.env.PUBLIC_URL + \"/\" + piece.pieceColor + \"-\" + piece.pieceType + \".png\" : null;\n\n\t\tconst rowIndicatorValue = (coord.x === 0) ? rowNum - coord.y : null;\n\t\tconst colIndicatorValue = (coord.y === colNum - 1) ? String.fromCharCode(97 + coord.x) : null;\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tkey={idx}\n\t\t\t\tpieceImgSrc={pieceImgSrc}\n\t\t\t\tstackImgSrc={stackImgSrc}\n\t\t\t\tsquareBackgroundColor={squareBackgroundColor}\n\t\t\t\tmayMove={mayMove}\n\t\t\t\tusingMask={usingMask}\n\t\t\t\tonClick={() => this.props.onClick(coord)}\n\t\t\t\trowIndicatorValue={rowIndicatorValue}\n\t\t\t\tcolIndicatorValue={colIndicatorValue}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"board-container\">\n\t\t\t\t{[...Array(rowNum)].map((ele, y) =>\n\t\t\t\t\t<div className=\"board-row\" key={y}>\n\t\t\t\t\t\t{[...Array(colNum)].map((ele, x) => \n\t\t\t\t\t\t\tthis.renderSquare(Coord(y, x))\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsquares: getInitSquares(),\n\t\t\tnextColor: \"white\",\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t\thistoryMove: [],\n\t\t\tdoingEnPassantCoord: null,\n\t\t};\n\t}\n\n\thandleClick(coord) {\n\t\tlet squares = this.state.squares.map(arr => arr.slice());\n\t\tlet historyMove = this.state.historyMove.slice();\n\t\tlet doingEnPassantCoord = this.state.doingEnPassantCoord;\n\t\tlet tryToMove = this.state.tryToMove;\n\t\tlet mayMovePosition = [];\n\t\tif (doingEnPassantCoord) {\n\t\t\tif (Math.abs(doingEnPassantCoord.y - coord.y) >= 4 || doingEnPassantCoord.x !== coord.x) return;\n\n\t\t\tconsole.log(\"doing en passant\");\n\t\t\tsquares = squares[doingEnPassantCoord.y][doingEnPassantCoord.x].updateSquaresUsingEnPassant(squares, doingEnPassantCoord, coord);\n\n\t\t\t// historyMove.push({\n\t\t\t// \t\"startPos\": tryToMove,\n\t\t\t// \t\"endPos\": coord,\n\t\t\t// \t\"piece\": squares[coord.y][coord.x],\n\t\t\t// });\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tdoingEnPassantCoord: null\n\t\t\t});\n\t\t} else if (tryToMove && (this.state.mayMovePosition.some(ele => ele.y === coord.y && ele.x === coord.x))) {\n\t\t\tsquares = squares[tryToMove.y][tryToMove.x].updateSquares(squares, tryToMove, coord);\n\n\t\t\thistoryMove.push({\n\t\t\t\t\"startPos\": tryToMove,\n\t\t\t\t\"endPos\": coord,\n\t\t\t\t\"piece\": squares[coord.y][coord.x],\n\t\t\t});\n\n\t\t\tif (squares[coord.y][coord.x].tryToEnPassant(coord)) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tdoingEnPassantCoord: coord\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tnextColor: (this.state.nextColor === \"black\" ? \"white\" : \"black\"),\n\t\t\t\thistoryMove: historyMove,\n\t\t\t});\n\n\n\t\t} else if (squares[coord.y][coord.x] && squares[coord.y][coord.x].pieceColor === this.state.nextColor) {\n\t\t\ttryToMove = coord;\n\t\t\tmayMovePosition = squares[coord.y][coord.x].getCanMovePosition(coord, squares, historyMove[historyMove.length - 1]);\n\t\t}\n\n\t\tthis.setState({\n\t\t\ttryToMove: tryToMove,\n\t\t\tmayMovePosition: mayMovePosition,\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t\ttryToMove={this.state.tryToMove}\n\t\t\t\t\t\tmayMovePosition={this.state.mayMovePosition}\n\t\t\t\t\t\tdoingEnPassantCoord={this.state.doingEnPassantCoord}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}