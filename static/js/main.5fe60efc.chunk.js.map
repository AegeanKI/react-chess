{"version":3,"sources":["index.js"],"names":["Coord","y","x","this","anotherCoord","times","yInc","xInc","Math","abs","xDis","yDis","chess","pieceName","pieceColor","Pawn","Queen","King","Rock","Bishop","Knight","Board","squares","map","row","piece","copyPiece","curPos","isValidCoord","lastMove","getPiece","positions","getCanMovePositionInGeneralRule","updateCanMovePositionInSpecialRule","targetPos","pieceType","hasPiece","isSamePieceColor","setPiece","isSamePieceType","rowNum","startPos","endPos","usingFirstRule","usingSecondRule","choose","copyBoard","adjustingPieceColor","newPiece","whichSpecialRule","removePiece","dir","minus","div","rockPos","colNum","isUsingSpeicalRule","updateSquaresUsingSpecialRule","setAlreadyMoved","isDoingEnPassant","updateBoardByEnPassant","updateBoardByMoving","newBoard","updateBoardByPiece","anotherKingPosition","getPieceCanMovePosition","some","ele","equal","directionForKing","direction","add","Piece","alreadyMoved","maxMultiple","max","board","canMovePositions","forEach","nextPos","mul","canEatPiece","push","yDir","firstCoord","step","secondCoord","leftTopCoord","rightTopCoord","newPosition","slice","directionForRock","directionForBishop","directionForQueen","directionForKnight","filter","mayLoose","getAlreadyMoved","pieceToCheckPositions","xDir","idx","Square","className","props","squareBackgroundColor","onClick","pieceImgSrc","src","alt","stackImgSrc","rowIndicatorValue","colIndicatorValue","React","Component","ChessBoard","String","fromCharCode","doingEnPassantCoord","doingEnPassantPiece","mayMove","mayMovePosition","tryToMove","usingMask","xEqual","process","Array","renderSquare","Game","state","getInitBoard","nextColor","historyMove","initBoard","fill","piecePos","split","coord","setState","length","handleDoingEnPassant","handlePieceMoving","handlePieceTryToMove","handleOperationCancel","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fe60efc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst rowNum = 8, colNum = 8;\n\nclass Coord {\n\tconstructor(y, x) {\n\t\tthis.y = y;\n\t\tthis.x = x;\n\t}\n\n\tadd(anotherCoord) {\n\t\treturn new Coord(this.y + anotherCoord.y, this.x + anotherCoord.x);\n\t}\n\n\tminus(anotherCoord) {\n\t\treturn new Coord(this.y - anotherCoord.y, this.x - anotherCoord.x);\n\t}\n\n\tequal(anotherCoord) {\n\t\treturn (anotherCoord !== null && this.y === anotherCoord.y && this.x === anotherCoord.x);\n\t}\n\n\tmul(times) {\n\t\treturn new Coord(this.y * times, this.x * times);\n\t}\n\n\tdiv(times) {\n\t\treturn new Coord(this.y / times, this.x / times);\n\t}\n\n\tstep(yInc, xInc) {\n\t\treturn new Coord(this.y + yInc, this.x + xInc);\n\t}\n\n\txDis(anotherCoord) {\n\t\treturn Math.abs(this.x - anotherCoord.x);\n\t}\n\n\tyDis(anotherCoord) {\n\t\treturn Math.abs(this.y - anotherCoord.y);\n\t}\n\n\txEqual(anotherCoord) {\n\t\treturn this.xDis(anotherCoord) === 0;\n\t}\n\n\tyEqual(anotherCoord) {\n\t\treturn this.yDis(anotherCoord) === 0;\n\t}\n};\n\nfunction chess(pieceName, pieceColor) {\n  switch (pieceName) {\n    case 'pawn': return new Pawn(pieceColor);\n    case 'queen': return new Queen(pieceColor);\n    case 'king': return new King(pieceColor);\n    case 'rock': return new Rock(pieceColor);\n    case 'bishop': return new Bishop(pieceColor);\n    case 'knight': return new Knight(pieceColor);\n\t\tdefault: return null;\n  }\n}\n\n\nclass Board {\n\tconstructor(squares) {\n\t\tthis.squares = squares.map(row => row.map(piece => (piece ? piece.copyPiece() : null)));\n\t}\n\n\tcopyBoard() {\n\t\treturn new Board(this.squares);\n\t}\n\n\tisValidCoord(curPos) {\n\t\treturn (curPos !== null && curPos.y >= 0 && curPos.y < rowNum && curPos.x >= 0 && curPos.x < colNum);\n\t}\n\n\tgetPiece(curPos) {\n\t\tif (this.isValidCoord(curPos)){\n\t\t\treturn this.squares[curPos.y][curPos.x];\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPieceCanMovePosition(curPos, lastMove) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\tconst piece = this.getPiece(curPos);\n\t\t\tconst positions = piece.getCanMovePositionInGeneralRule(curPos, this);\n\t\t\treturn piece.updateCanMovePositionInSpecialRule(curPos, this, positions, lastMove);\n\t\t}\n\t\treturn [];\n\t}\n\n\thasPiece(curPos) { \n\t\tif (this.isValidCoord(curPos)) {\n\t\t\treturn (this.squares[curPos.y][curPos.x] !== null);\n\t\t}\n\t\treturn false;\n\t}\n\n\thasNoPiece(curPos) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\treturn (this.squares[curPos.y][curPos.x] === null);\n\t\t}\n\t\treturn false;\n\t}\n\n\tisSamePieceColor(curPos, targetPos) {\n\t\treturn (this.getPiece(curPos).pieceColor === this.getPiece(targetPos).pieceColor);\n\t}\n\n\tisSamePieceType(curPos, pieceType) {\n\t\treturn (this.getPiece(curPos).pieceType === pieceType);\n\t}\n\n\tcanEatPiece(curPos, targetPos) {\n\t\treturn (this.isValidCoord(targetPos) && this.hasPiece(targetPos) && !this.isSamePieceColor(curPos, targetPos));\n\t}\n\n\tsetPiece(curPos, piece) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\tthis.squares[curPos.y][curPos.x] = piece;\n\t\t}\n\t}\n\n\tremovePiece(curPos) {\n\t\tthis.setPiece(curPos, null);\n\t}\n\n\tisDoingEnPassant(curPos) {\n\t\tif (this.isValidCoord(curPos)) {\n\t\t\treturn (this.isSamePieceType(curPos, \"pawn\") && (curPos.y === 0 || curPos.y === rowNum - 1));\n\t\t}\n\t\treturn false;\n\t}\n\n\tisUsingSpeicalRule(startPos, endPos) {\n\t\tconst usingFirstRule = (this.isSamePieceType(startPos, \"pawn\") && startPos.xDis(endPos) === 1 && !this.hasPiece(endPos)) ? 1 : null;\n\t\tconst usingSecondRule = (this.isSamePieceType(startPos, \"king\") && startPos.xDis(endPos) === 2) ? 2 : null;\n\t\treturn  (usingFirstRule || usingSecondRule);\n\t}\n\n\tupdateBoardByEnPassant(curPos, choose) {\n\t\tlet copyBoard = this.copyBoard();\n\t\tconst adjustingPieceColor = this.getPiece(curPos).pieceColor;\n\t\tconst newPiece = (choose.yDis(curPos) === 0) ? chess(\"queen\", adjustingPieceColor) :\n\t\t\t\t\t\t\t\t\t\t (choose.yDis(curPos) === 1) ? chess(\"knight\", adjustingPieceColor) :\n\t\t\t\t\t\t\t\t\t\t (choose.yDis(curPos) === 2) ? chess(\"rock\", adjustingPieceColor) :\n\t\t\t\t\t\t\t\t\t\t (choose.yDis(curPos) === 3) ? chess(\"bishop\", adjustingPieceColor) : null;\n\t\tcopyBoard.setPiece(curPos, newPiece);\n\t\treturn copyBoard;\n\t}\n\n\tupdateSquaresUsingSpecialRule(whichSpecialRule, startPos, endPos) {\n\t\tlet copyBoard = this.copyBoard();\n\t\tif (whichSpecialRule === 1) {\n\t\t\tcopyBoard.removePiece(new Coord(startPos.y, endPos.x));\n\t\t} else if (whichSpecialRule === 2) {\n\t\t\tconst dir = endPos.minus(startPos).div(2);\n\t\t\tconst rockPos = (dir.x > 0 ? new Coord(startPos.y, colNum - 1) : new Coord(startPos.y, 0));\n\t\t\tcopyBoard.setPiece(endPos.minus(dir), this.getPiece(rockPos));\n\t\t\tcopyBoard.removePiece(rockPos);\n\t\t}\n\t\treturn copyBoard;\n\t}\n\n\tupdateBoardByMoving(startPos, endPos) {\n\t\tlet copyBoard = this.copyBoard();\n\t\tconst whichSpecialRule = this.isUsingSpeicalRule(startPos, endPos);\n\t\tif (whichSpecialRule) {\n\t\t\tcopyBoard = this.updateSquaresUsingSpecialRule(whichSpecialRule, startPos, endPos);\n\t\t}\n\t\tcopyBoard.setPiece(endPos, copyBoard.getPiece(startPos));\n\t\tcopyBoard.removePiece(startPos);\n\t\tcopyBoard.getPiece(endPos).setAlreadyMoved();\n\t\treturn copyBoard;\n\t}\n\n\tupdateBoardByPiece(startPos, endPos) {\n\t\tif (this.isDoingEnPassant(startPos)) {\n\t\t\treturn this.updateBoardByEnPassant(startPos, endPos);\n\t\t}\n\t\treturn this.updateBoardByMoving(startPos, endPos);\n\t}\n\n\tmayLoose(startPos, endPos) {\n\t\tconst newBoard = this.updateBoardByPiece(startPos, endPos);\n\t\tlet anotherKingPosition = null;\n\t\tfor (let y = 0; y < rowNum; y++) {\n\t\t\tfor (let x = 0; x < colNum; x++) {\n\t\t\t\tconst curPos = new Coord(y, x);\n\t\t\t\tif (!newBoard.hasPiece(curPos) || newBoard.isSamePieceColor(endPos, curPos)) continue;\n\t\t\t\tif (newBoard.isSamePieceType(curPos, \"king\")) {\n\t\t\t\t\tanotherKingPosition = curPos;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst mayMovePosition = newBoard.getPieceCanMovePosition(curPos, {\n\t\t\t\t\t\"startPos\": startPos,\n\t\t\t\t\t\"endPos\": endPos,\n\t\t\t\t\t\"piece\": newBoard.getPiece(endPos),\n\t\t\t\t});\n\t\t\t\tif (mayMovePosition.some(ele => ele.equal(endPos))) return true;\n\t\t\t}\n\t\t}\n\n\t\tconst directionForKing = newBoard.getPiece(anotherKingPosition).direction;\n\t\tfor (let dir of directionForKing) {\n\t\t\tconst mayMovePosition = anotherKingPosition.add(dir);\n\t\t\tif (mayMovePosition.equal(endPos)) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n};\n\nclass Piece {\n\tconstructor(pieceColor, pieceType, alreadyMoved=false, direction=[], maxMultiple=Math.max(rowNum, colNum)) {\n\t\tthis.pieceColor = pieceColor;\n\t\tthis.pieceType = pieceType;\n\t\tthis.alreadyMoved = alreadyMoved;\n\t\tthis.direction = direction;\n\t\tthis.maxMultiple = maxMultiple;\n\t}\n\n\tgetCanMovePositionInGeneralRule(curPos, board) {\n\t\tlet canMovePositions = [];\n\t\tthis.direction.forEach((dir) => {\n\t\t\tfor (let times = 1; times <= this.maxMultiple; times++) {\n\t\t\t\tlet nextPos = curPos.add(dir.mul(times));\n\n\t\t\t\tif (!board.isValidCoord(nextPos)) break;\n\t\t\t\tif (board.hasPiece(nextPos)) {\n\t\t\t\t\tif (board.canEatPiece(curPos, nextPos))\n\t\t\t\t\t\tcanMovePositions.push(nextPos);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcanMovePositions.push(nextPos);\n\t\t\t}\n\t\t});\n\t\treturn canMovePositions;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(curPos, board, positions, lastMove) {\n\t\treturn positions;\n\t}\n\n\tgetAlreadyMoved() {\n\t\treturn this.alreadyMoved;\n\t}\n\n\tsetAlreadyMoved() {\n\t\tthis.alreadyMoved = true;\n\t}\n};\n\nclass Pawn extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tsuper(pieceColor, \"pawn\", alreadyMoved);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Pawn(this.pieceColor, this.alreadyMoved);\n\t}\n\n\tgetCanMovePositionInGeneralRule(curPos, board) {\n\t\tconst startPos = (this.pieceColor === \"white\") ? rowNum - 2 : 1;\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst firstCoord = curPos.step(yDir, 0);\n\t\tconst secondCoord = curPos.step(2 * yDir, 0);\n\t\tlet canMovePositions = [];\n\t\tif (board.isValidCoord(firstCoord) && !board.hasPiece(firstCoord)){\n\t\t\tcanMovePositions.push(firstCoord);\n\t\t}\n\t\tif (curPos.y === startPos && !board.hasPiece(firstCoord) && !board.hasPiece(secondCoord)){\n\t\t\tcanMovePositions.push(secondCoord);\n\t\t}\n\t\treturn canMovePositions;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(curPos, board, positions, lastMove) {\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst leftTopCoord = curPos.step(yDir, 1);\n\t\tconst rightTopCoord = curPos.step(yDir, -1);\n\n\t\tlet newPosition = positions.slice();\n\t\tif (board.canEatPiece(curPos, leftTopCoord)){\n\t\t\tnewPosition.push(leftTopCoord);\n\t\t}\n\t\tif (board.canEatPiece(curPos, rightTopCoord)){\n\t\t\tnewPosition.push(rightTopCoord);\n\t\t}\n\t\tif (lastMove && lastMove.piece.pieceType === \"pawn\" &&\n\t\t    lastMove.startPos.yDis(lastMove.endPos) === 2 &&\n\t\t\t\tlastMove.startPos.xDis(curPos) === 1 &&\n\t\t\t\tlastMove.endPos.yDis(curPos) === 0) {\n\t\t\tnewPosition.push(new Coord(curPos.y + yDir, lastMove.startPos.x));\n\t\t}\n\t\treturn newPosition;\n\t}\n};\n\nclass Rock extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForRock = [new Coord(1, 0), new Coord(0, 1), new Coord(-1, 0), new Coord(0, -1)];\n\t\tsuper(pieceColor, \"rock\", alreadyMoved, directionForRock);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Rock(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass Bishop extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForBishop = [new Coord(1, 1), new Coord(1, -1), new Coord(-1, 1), new Coord(-1, -1)];\n\t\tsuper(pieceColor, \"bishop\", alreadyMoved, directionForBishop);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Bishop(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass Queen extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForQueen = [new Coord(1, 0), new Coord(0, 1), new Coord(-1, 0), new Coord(0, -1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new Coord(1, 1), new Coord(1, -1), new Coord(-1, 1), new Coord(-1, -1)];\n\t\tsuper(pieceColor, \"queen\", alreadyMoved, directionForQueen);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Queen(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass Knight extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForKnight = [new Coord(2, 1), new Coord(-2, 1), new Coord(2, -1), new Coord(-2, -1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew Coord(1, 2), new Coord(1, -2), new Coord(-1, 2), new Coord(-1, -2)];\n\t\tsuper(pieceColor, \"knight\", alreadyMoved, directionForKnight, 1);\n\t}\n\n\tcopyPiece() {\n\t\treturn new Knight(this.pieceColor, this.alreadyMoved);\n\t}\n}\n\nclass King extends Piece {\n\tconstructor(pieceColor, alreadyMoved=false) {\n\t\tconst directionForKing = [new Coord(1, 1), new Coord(-1, 1), new Coord(1, -1), new Coord(-1, -1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew Coord(1, 0), new Coord(0, -1), new Coord(-1, 0), new Coord(0, 1)];\n\t\tsuper(pieceColor, \"king\", alreadyMoved, directionForKing, 1);\n\t}\n\n\tcopyPiece() {\n\t\treturn new King(this.pieceColor, this.alreadyMoved);\n\t}\n\n\tupdateCanMovePositionInSpecialRule(curPos, board, positions, lastMove) {\n\t\tpositions = positions.filter(endPos => !board.mayLoose(curPos, endPos));\n\n\t\tif (!board.getPiece(curPos).getAlreadyMoved()) {\n\t\t\tconst pieceToCheckPositions = [new Coord(curPos.y, 0), new Coord(curPos.y, colNum - 1)];\n\t\t\tconst xDir = [new Coord(0, -1), new Coord(0, 1)];\n\t\t\tpieceToCheckPositions.forEach((rockPos, idx) => {\n\t\t\t\tif (board.hasPiece(rockPos) && board.isSamePieceType(rockPos, \"rock\") && !board.getPiece(rockPos).getAlreadyMoved()) {\n\t\t\t\t\tfor (let nextPos = curPos.add(xDir[idx]); !rockPos.equal(nextPos); nextPos = nextPos.add(xDir[idx])) {\n\t\t\t\t\t\tif (board.hasPiece(nextPos)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (board.mayLoose(curPos, curPos.add(xDir[idx]), lastMove) ||\n\t\t\t\t\t\t\tboard.mayLoose(curPos, curPos.add(xDir[idx].mul(2)), lastMove)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tpositions.push(curPos.add(xDir[idx].mul(2)));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn positions;\n\t}\n}\n\nclass Square extends React.Component {\n\trender() {\n\t\tconst className = \"square \" + this.props.squareBackgroundColor;\n\n\t\treturn (\n\t\t\t<button className={className} onClick={() => this.props.onClick()}>\n\t\t\t\t{this.props.pieceImgSrc ? <img src={this.props.pieceImgSrc} alt={this.props.pieceImgSrc} /> : null}\n\t\t\t\t{this.props.stackImgSrc ? <img className=\"stack-image\" src={this.props.stackImgSrc} alt={this.props.stackImgSrc} /> : null}\n\t\t\t\t{this.props.rowIndicatorValue ? <p className=\"row-indicator\">{this.props.rowIndicatorValue}</p> : null}\n\t\t\t\t{this.props.colIndicatorValue ? <p className=\"col-indicator\">{this.props.colIndicatorValue}</p> : null}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nclass ChessBoard extends React.Component {\n\trenderSquare(curPos) {\n\t\tconst idx = curPos.y * colNum + curPos.x;\n\t\tconst rowIndicatorValue = (curPos.x === 0) ? rowNum - curPos.y : null;\n\t\tconst colIndicatorValue = (curPos.y === colNum - 1) ? String.fromCharCode(97 + curPos.x) : null;\n\n\t\tconst doingEnPassantCoord = this.props.doingEnPassantCoord;\n\t\tconst piece = this.props.board.getPiece(curPos);\n\t\tconst doingEnPassantPiece = this.props.board.getPiece(doingEnPassantCoord);\n\t\tconst mayMove = this.props.mayMovePosition.some(ele => ele.equal(curPos));\n\t\tconst squareBackgroundColor = curPos.equal(doingEnPassantCoord) ? \"orange-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  curPos.equal(this.props.tryToMove) ? \"yellow-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (curPos.y + curPos.x)  % 2 === 0 ? \"black-square\" : \"white-square\";\n\t\tconst usingMask = (doingEnPassantCoord && curPos.xEqual(doingEnPassantCoord) && curPos.yDis(doingEnPassantCoord) < 4) ? \"light-mask\" :\n\t\t\t\t\t\t\t\t\t\t  (doingEnPassantCoord && !curPos.equal(doingEnPassantCoord)) ? \"dark-mask\" : null;\n\t\tconst stackImgSrc = (mayMove && piece && piece.pieceType) ? process.env.PUBLIC_URL + \"/circle.png\" :\n\t\t\t\t\t\t\t\t\t\t\t  (mayMove) ? process.env.PUBLIC_URL + \"/dot.png\" : \n\t\t\t\t\t\t\t\t\t\t\t  (usingMask) ? process.env.PUBLIC_URL + \"/\" + usingMask + \".png\" : null;\n\t\tconst pieceImgSrc = (usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 0) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-queen.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 1) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-knight.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 2) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-rock.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && curPos.yDis(doingEnPassantCoord) === 3) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-bishop.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(piece) ? process.env.PUBLIC_URL + \"/\" + piece.pieceColor + \"-\" + piece.pieceType + \".png\" : null;\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tkey={idx}\n\t\t\t\trowIndicatorValue={rowIndicatorValue}\n\t\t\t\tcolIndicatorValue={colIndicatorValue}\n\t\t\t\tpieceImgSrc={pieceImgSrc}\n\t\t\t\tstackImgSrc={stackImgSrc}\n\t\t\t\tsquareBackgroundColor={squareBackgroundColor}\n\t\t\t\tmayMove={mayMove}\n\t\t\t\tusingMask={usingMask}\n\t\t\t\tonClick={() => this.props.onClick(curPos)}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"chess-board-container\">\n\t\t\t\t{[...Array(rowNum)].map((ele, y) =>\n\t\t\t\t\t<div className=\"chess-board-row\" key={y}>\n\t\t\t\t\t\t{[...Array(colNum)].map((ele, x) => \n\t\t\t\t\t\t\tthis.renderSquare(new Coord(y, x))\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tboard: new Board(this.getInitBoard()),\n\t\t\tnextColor: \"white\",\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t\thistoryMove: [],\n\t\t\tdoingEnPassantCoord: null,\n\t\t};\n\t}\n\n\tgetInitBoard() {\n\t\tlet initBoard = Array(rowNum).fill(0).map(x => Array(colNum).fill(null));\n\t\tconst piecePos = 'rock knight bishop queen king bishop knight rock'.split(' ');\n\t\tinitBoard[0] = piecePos.map((pieceName) => chess(pieceName, \"black\"));\n\t\tinitBoard[1] = [...Array(colNum)].map((ele) => chess(\"pawn\", \"black\"));\n\t\tinitBoard[rowNum - 2] = [...Array(colNum)].map((ele) => chess(\"pawn\", \"white\"));\n\t\tinitBoard[rowNum - 1] = piecePos.map((pieceName) => chess(pieceName, \"white\"));\n\t\treturn initBoard;\n\t}\n\n\thandleDoingEnPassant(coord) {\n\t\tconst doingEnPassantCoord = this.state.doingEnPassantCoord;\n\t\tif (Math.abs(doingEnPassantCoord.y - coord.y) >= 4 || doingEnPassantCoord.x !== coord.x) {\n\t\t\treturn;\n\t\t}\n\t\tconst newBoard = this.state.board.updateBoardByPiece(doingEnPassantCoord, coord);\n\t\t\t// historyMove.push({\n\t\t\t// });\n\t\tthis.setState({\n\t\t\tboard: newBoard,\n\t\t\tdoingEnPassantCoord: null,\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t});\n\t}\n\n\thandlePieceMoving(coord) {\n\t\tconst historyMove = this.state.historyMove.slice();\n\t\tconst newBoard = this.state.board.updateBoardByPiece(this.state.tryToMove, coord);\n\t\thistoryMove.push({\n\t\t\t\"startPos\": this.state.tryToMove,\n\t\t\t\"endPos\": coord,\n\t\t\t\"piece\": newBoard.getPiece(coord),\n\t\t});\n\t\tthis.setState({\n\t\t\tboard: newBoard,\n\t\t\tnextColor: (this.state.nextColor === \"black\" ? \"white\" : \"black\"),\n\t\t\thistoryMove: historyMove,\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t});\n\n\t\tif (newBoard.isDoingEnPassant(coord)) {\n\t\t\tthis.setState({\n\t\t\t\tdoingEnPassantCoord: coord\n\t\t\t});\n\t\t}\n\t}\n\n\thandlePieceTryToMove(coord) {\n\t\tconst board = this.state.board;\n\t\tconst historyMove = this.state.historyMove.slice();\n\t\tconst mayMovePosition = board.getPieceCanMovePosition(coord, historyMove[historyMove.length - 1]);\n\t\tthis.setState({\n\t\t\ttryToMove: coord,\n\t\t\tmayMovePosition: mayMovePosition,\n\t\t});\n\t}\n\n\thandleOperationCancel(coord) {\n\t\tthis.setState({\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t});\n\t}\n\n\thandleClick(coord) {\n\t\tif (this.state.doingEnPassantCoord) {\n\t\t\tthis.handleDoingEnPassant(coord);\n\t\t} else if (this.state.mayMovePosition.some(ele => ele.equal(coord))) {\n\t\t\tthis.handlePieceMoving(coord);\n\t\t} else if (this.state.board.hasPiece(coord) && this.state.board.getPiece(coord).pieceColor === this.state.nextColor) {\n\t\t\tthis.handlePieceTryToMove(coord);\n\t\t} else {\n\t\t\tthis.handleOperationCancel(coord);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-chess-board\">\n\t\t\t\t\t<ChessBoard\n\t\t\t\t\t\tboard={this.state.board}\n\t\t\t\t\t\tonClick={(coord) => this.handleClick(coord)}\n\t\t\t\t\t\ttryToMove={this.state.tryToMove}\n\t\t\t\t\t\tmayMovePosition={this.state.mayMovePosition}\n\t\t\t\t\t\tdoingEnPassantCoord={this.state.doingEnPassantCoord}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}