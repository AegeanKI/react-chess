{"version":3,"sources":["index.js"],"names":["Coord","y","x","getInitSquares","initSquares","Array","fill","map","ele","i","forEach","coord","Pawn","rowNum","colNum","Rock","Knight","Bishop","Queen","King","Piece","pieceColor","pieceType","this","moved","squares","isValidCoord","hasPiece","isSamePieceColor","positions","lastMove","getCanMovePositionInGeneralRule","updateCanMovePositionInSpecialRule","startPos","endPos","choose","BeforeSquares","arr","slice","isUsingSpeicalRule","updateSquaresUsingSpecialRule","console","log","yDir","firstCoord","secondCoord","canMovePositions","push","leftTopCoord","rightTopCoord","piece","Math","abs","newPiece","dir","nextCoord","nextSquares","anotherKingPosition","getCanMovePosition","some","directionForKing","length","mayMovePosition","filter","mayLoose","pieceToCheckPositions","xDir","idx","rockCoord","Square","className","props","squareBackgroundColor","onClick","pieceImgSrc","src","alt","stackImgSrc","rowIndicatorValue","colIndicatorValue","React","Component","Board","doingEnPassantCoord","doingEnPassantPiece","mayMove","tryToMove","usingMask","process","String","fromCharCode","renderSquare","Game","state","nextColor","historyMove","updateSquaresUsingEnPassant","setState","updateSquares","tryToEnPassant","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22ec214b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst rowNum = 8, colNum = 8;\n\nfunction Coord (y, x) {\n\treturn { \"y\": y, \"x\": x }\n}\n\nfunction getInitSquares() {\n\tlet initSquares = Array(rowNum).fill(0).map(x => Array(colNum).fill(null));\n\n\tconst blackPawnPositions = [...Array(colNum)].map((ele, i) => Coord(1, i));\n\tblackPawnPositions.forEach((coord, i) => initSquares[coord.y][coord.x] = new Pawn(\"black\"));\n\tconst whitePawnPositions = [...Array(colNum)].map((ele, i) => Coord(rowNum - 2, i));\n\twhitePawnPositions.forEach((coord, i) => initSquares[coord.y][coord.x] = new Pawn(\"white\"));\n\n\tconst blackRockPosition = [Coord(0, 0), Coord(0, colNum - 1), Coord(rowNum - 1, 0), Coord(rowNum - 1, colNum - 1)];\n\tblackRockPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Rock(\"black\"));\n\tconst whiteRockPosition = [Coord(rowNum - 1, 0), Coord(rowNum - 1, colNum - 1)];\n\twhiteRockPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Rock(\"white\"));\n\n\tconst blackKnightPosition = [Coord(0, 1), Coord(0, colNum - 2)];\n\tblackKnightPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Knight(\"black\"));\n\tconst whiteKnightPosition = [Coord(rowNum - 1, 1), Coord(rowNum - 1, colNum - 2)];\n\twhiteKnightPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Knight(\"white\"));\n\n\tconst blackBishopPosition = [Coord(0, 2), Coord(0, colNum - 3)];\n\tblackBishopPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Bishop(\"black\"));\n\tconst whiteBishopPosition = [Coord(rowNum - 1, 2), Coord(rowNum - 1, colNum - 3)];\n\twhiteBishopPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Bishop(\"white\"));\n\n\tconst blackQueenPosition = [Coord(0, 3)];\n\tblackQueenPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Queen(\"black\"));\n\tconst whiteQueenPosition = [Coord(rowNum - 1, 3)];\n\twhiteQueenPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new Queen(\"white\"));\n\n\tconst blackKingPosition = [Coord(0, 4)];\n\tblackKingPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new King(\"black\"));\n\tconst whiteKingPosition = [Coord(rowNum - 1, 4)];\n\twhiteKingPosition.forEach((coord, i) => initSquares[coord.y][coord.x] = new King(\"white\"));\n\n\treturn initSquares;\n}\n\nclass Piece {\n\tconstructor(pieceColor, pieceType) {\n\t\tthis.pieceColor = pieceColor;\n\t\tthis.pieceType = pieceType;\n\t\tthis.moved = false;\n\t}\n\n\thasPiece(coord, squares) {\n\t\treturn squares[coord.y][coord.x];\n\t}\n\n\tisValidCoord(coord) {\n\t\treturn (coord.y >= 0 && coord.y < rowNum && coord.x >= 0 && coord.x < colNum);\n\t}\n\n\tisSamePieceColor(coord, squares) {\n\t\treturn (squares[coord.y][coord.x].pieceColor === this.pieceColor);\n\t}\n\n\tcanEatPiece(coord, squares) {\n\t\treturn (this.isValidCoord(coord) && this.hasPiece(coord, squares) && !this.isSamePieceColor(coord, squares))\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) { return; }\n\tupdateCanMovePositionInSpecialRule(coord, squares, positions) { return positions; }\n\tgetCanMovePosition(coord, squares, lastMove) {\n\t\tlet positions = this.getCanMovePositionInGeneralRule(coord, squares);\n\t\tpositions = this.updateCanMovePositionInSpecialRule(coord, squares, positions, lastMove);\n\n\t\treturn positions;\n\t}\n\n\tisUsingSpeicalRule(squares, startPos, endPos) { return false; }\n\tupdateSquaresUsingSpecialRule(squares, startPos, endPos) { return squares; }\n\tupdateSquaresUsingEnPassant(squares, coord, choose) { return squares; }\n\n\tupdateSquares(BeforeSquares, startPos, endPos) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tif (squares[startPos.y][startPos.x].isUsingSpeicalRule(squares, startPos, endPos))\n\t\t\tsquares = squares[startPos.y][startPos.x].updateSquaresUsingSpecialRule(squares, startPos, endPos);\n\t\t\t// squares[startPos.y][endPos.x] = null;\n\t\tsquares[endPos.y][endPos.x] = squares[startPos.y][startPos.x];\n\t\tsquares[startPos.y][startPos.x] = null;\n\t\tsquares[endPos.y][endPos.x].moved = true;\n\n\t\tif (BeforeSquares[startPos.y][startPos.x] === null)\n\t\t\tconsole.log(\"something wrong\");\n\n\t\treturn squares;\n\t}\n\n\ttryToEnPassant(coord) { return false; }\n\t// move() {\n\t// \tthis.moved = true;\n\t// }\n};\n\nclass Pawn extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"pawn\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst startPos = (this.pieceColor === \"white\") ? rowNum - 2 : 1;\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst firstCoord = Coord(coord.y + yDir, coord.x);\n\t\tconst secondCoord = Coord(coord.y + 2 * yDir, coord.x);\n\t\tlet canMovePositions = [];\n\t\tif (super.isValidCoord(firstCoord) && !super.hasPiece(firstCoord, squares))\n\t\t\tcanMovePositions.push(firstCoord);\n\t\tif (coord.y === startPos && !super.hasPiece(firstCoord, squares) && !super.hasPiece(secondCoord, squares))\n\t\t\tcanMovePositions.push(secondCoord);\n\n\t\treturn canMovePositions;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(coord, squares, positions, lastMove) {\n\t\tconst yDir = (this.pieceColor === \"white\") ? -1 : 1;\n\t\tconst leftTopCoord = Coord(coord.y + yDir, coord.x + 1);\n\t\tconst rightTopCoord = Coord(coord.y + yDir, coord.x - 1);\n\n\t\tif (super.canEatPiece(leftTopCoord, squares))\n\t\t\tpositions.push(leftTopCoord);\n\t\tif (super.canEatPiece(rightTopCoord, squares))\n\t\t\tpositions.push(rightTopCoord);\n\n\t\tif (lastMove && lastMove.piece.pieceType === \"pawn\" && Math.abs(lastMove.startPos.y - lastMove.endPos.y) === 2 &&\n\t\t\t\tMath.abs(lastMove.startPos.x - coord.x) === 1 && lastMove.endPos.y === coord.y) {\n\t\t\tpositions.push(Coord(coord.y + yDir, lastMove.startPos.x));\n\t\t}\n\n\t\treturn positions;\n\t}\n\n\tisUsingSpeicalRule(squares, startPos, endPos) {\n\t\treturn (squares[startPos.y][startPos.x].pieceType === \"pawn\" && Math.abs(startPos.x - endPos.x) === 1 && squares[endPos.y][endPos.x] === null);\n\t}\n\n\tupdateSquaresUsingSpecialRule(BeforeSquares, startPos, endPos) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tsquares[startPos.y][endPos.x] = null;\n\t\treturn squares;\n\t}\n\n\ttryToEnPassant(coord) { \n\t\treturn (coord.y === 0 || coord.y === rowNum - 1);\n\t}\n\n\tupdateSquaresUsingEnPassant(BeforeSquares, coord, choose) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tconst newPiece = (choose.y === coord.y) ? new Queen(this.pieceColor) :\n\t\t\t\t\t\t\t\t\t\t (Math.abs(choose.y - coord.y) === 1) ? new Knight(this.pieceColor) :\n\t\t\t\t\t\t\t\t\t\t (Math.abs(choose.y - coord.y) === 2) ? new Rock(this.pieceColor) :\n\t\t\t\t\t\t\t\t\t\t (Math.abs(choose.y - coord.y) === 3) ? new Bishop(this.pieceColor) : null;\n\t\tsquares[coord.y][coord.x] = newPiece;\n\t\t// if (choose.y ===)\n\t\treturn squares;\n\t}\n};\n\nclass Rock extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"rock\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst directionForRock = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n\t\tlet canMovePositions = [];\n\t\tdirectionForRock.forEach((dir) => {\n\t\t\tlet nextCoord = Coord(coord.y + dir[0], coord.x + dir[1]);\n\t\t\tfor (; super.isValidCoord(nextCoord) && !super.hasPiece(nextCoord, squares); nextCoord = Coord(nextCoord.y + dir[0], nextCoord.x + dir[1]))\n\t\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t\tif (super.canEatPiece(nextCoord, squares))\n\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t});\n\t\treturn canMovePositions;\n\t}\n}\n\nclass Bishop extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"bishop\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst directionForBishop = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\n\t\tlet canMovePositions = [];\n\t\tdirectionForBishop.forEach((dir) => {\n\t\t\tlet nextCoord = Coord(coord.y + dir[0], coord.x + dir[1]);\n\t\t\tfor (; super.isValidCoord(nextCoord) && !super.hasPiece(nextCoord, squares); nextCoord = Coord(nextCoord.y + dir[0], nextCoord.x + dir[1]))\n\t\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t\tif (super.canEatPiece(nextCoord, squares))\n\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t});\n\t\treturn canMovePositions;\n\t}\n}\n\nclass Queen extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"queen\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst directionForQueen = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n\t\tlet canMovePositions = [];\n\t\tdirectionForQueen.forEach((dir) => {\n\t\t\tlet nextCoord = Coord(coord.y + dir[0], coord.x + dir[1]);\n\t\t\tfor (; super.isValidCoord(nextCoord) && !super.hasPiece(nextCoord, squares); nextCoord = Coord(nextCoord.y + dir[0], nextCoord.x + dir[1]))\n\t\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t\tif (super.canEatPiece(nextCoord, squares))\n\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t});\n\t\treturn canMovePositions;\n\t}\n}\n\nclass Knight extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"knight\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst directionForKnight = [[2, 1], [-2, 1], [2, -1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n\t\tlet canMovePositions = [];\n\n\t\tdirectionForKnight.forEach((dir) => {\n\t\t\tlet nextCoord = Coord(coord.y + dir[0], coord.x + dir[1]);\n\t\t\tif (super.isValidCoord(nextCoord) && (!super.hasPiece(nextCoord, squares) || !super.isSamePieceColor(nextCoord, squares)))\n\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t});\n\t\treturn canMovePositions;\n\t}\n}\n\nclass King extends Piece {\n\tconstructor(pieceColor) {\n\t\tsuper(pieceColor, \"king\");\n\t}\n\n\tgetCanMovePositionInGeneralRule(coord, squares) {\n\t\tconst directionForKing = [[1, 1], [-1, 1], [1, -1], [-1, -1], [1, 0], [0, -1], [-1, 0], [0, 1]];\n\t\tlet canMovePositions = [];\n\n\t\tdirectionForKing.forEach((dir) => {\n\t\t\tlet nextCoord = Coord(coord.y + dir[0], coord.x + dir[1]);\n\t\t\tif (super.isValidCoord(nextCoord) && (!super.hasPiece(nextCoord, squares) || !super.isSamePieceColor(nextCoord, squares)))\n\t\t\t\tcanMovePositions.push(nextCoord);\n\t\t});\n\t\treturn canMovePositions;\n\t}\n\n\tmayLoose(squares, startPos, endPos, lastMove) {\n\t\tconst nextSquares = super.updateSquares(squares, startPos, endPos);\n\t\tlet anotherKingPosition = null;\n\t\tfor (let y = 0; y < rowNum; y++) {\n\t\t\tfor (let x = 0; x < colNum; x++) {\n\t\t\t\tif (!nextSquares[y][x] || super.isSamePieceColor(Coord(y, x), nextSquares)) continue;\n\t\t\t\tif (nextSquares[y][x].pieceType === \"king\") {\n\t\t\t\t\tanotherKingPosition = Coord(y, x);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst mayMovePosition = nextSquares[y][x].getCanMovePosition(Coord(y, x), nextSquares, {\n\t\t\t\t\t\"startPos\": startPos,\n\t\t\t\t\t\"endPos\": endPos,\n\t\t\t\t\t\"piece\": nextSquares[endPos.y][endPos.x],\n\t\t\t\t});\n\t\t\t\tif (mayMovePosition.some(ele => ele.y === endPos.y && ele.x === endPos.x)) {\n\t\t\t\t\tconsole.log(nextSquares[y][x].pieceColor, \"-\", nextSquares[y][x].pieceType, \" may cause lose\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst directionForKing = [[1, 1], [-1, 1], [1, -1], [-1, -1], [1, 0], [0, -1], [-1, 0], [0, 1]];\n\t\tfor (let i = 0; i < directionForKing.length; i++) {\n\t\t\tconst mayMovePosition = Coord(anotherKingPosition.y + directionForKing[i][0], anotherKingPosition.x + directionForKing[i][1]);\n\t\t\tif (mayMovePosition.y === endPos.y && mayMovePosition.x === endPos.x)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tupdateCanMovePositionInSpecialRule(coord, squares, positions, lastMove) {\n\t\tpositions = positions.filter(endPos => !this.mayLoose(squares, coord, endPos, lastMove));\n\n\t\tif (!super.moved) {\n\t\t\tconst pieceToCheckPositions = [Coord(coord.y, 0), Coord(coord.y, colNum - 1)];\n\t\t\tconst xDir = [-1, 1];\n\t\t\tpieceToCheckPositions.forEach((ele, idx) => {\n\t\t\t\tconst piece = squares[ele.y][ele.x];\n\t\t\t\tif (piece && piece.pieceType === \"rock\" && !piece.moved) {\n\t\t\t\t\tfor (let i = Coord(coord.y, coord.x + xDir[idx]); i.y !== ele.y || i.x !== ele.x; i = Coord(i.y, i.x + xDir[idx]))\n\t\t\t\t\t\tif (super.hasPiece(i, squares)) return;\n\t\t\t\t\tif (this.mayLoose(squares, coord, Coord(coord.y, coord.x + xDir[idx]), lastMove) || this.mayLoose(squares, coord, Coord(coord.y, coord.x + 2 * xDir[idx]), lastMove)) return;\n\t\t\t\t\t\n\t\t\t\t\tpositions.push(Coord(coord.y, coord.x + 2 * xDir[idx]));\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\treturn positions;\n\t}\n\n\tisUsingSpeicalRule(squares, startPos, endPos) {\n\t\treturn (squares[startPos.y][startPos.x].pieceType === \"king\" && Math.abs(startPos.x - endPos.x) === 2);\n\t}\n\n\tupdateSquaresUsingSpecialRule(BeforeSquares, startPos, endPos) {\n\t\tlet squares = BeforeSquares.map(arr => arr.slice());\n\t\tconst xDir = (endPos.x - startPos.x) / 2;\n\t\tconst rockCoord = (xDir > 0 ? Coord(startPos.y, colNum - 1) : Coord(startPos.y, 0));\n\t\tsquares[startPos.y][endPos.x - xDir] = squares[rockCoord.y][rockCoord.x];\n\t\tsquares[rockCoord.y][rockCoord.x] = null;\n\t\treturn squares;\n\t}\n}\n\nclass Square extends React.Component {\n\trender() {\n\t\tconst className = \"square \" + this.props.squareBackgroundColor;\n\n\t\treturn (\n\t\t\t<button className={className} onClick={() => this.props.onClick()}>\n\t\t\t\t{this.props.pieceImgSrc ? <img src={this.props.pieceImgSrc} alt={this.props.pieceImgSrc} /> : null}\n\t\t\t\t{this.props.stackImgSrc ? <img className=\"stack-image\" src={this.props.stackImgSrc} alt={this.props.stackImgSrc} /> : null}\n\t\t\t\t{this.props.rowIndicatorValue ? <p className=\"row-indicator\">{this.props.rowIndicatorValue}</p> : null}\n\t\t\t\t{this.props.colIndicatorValue ? <p className=\"col-indicator\">{this.props.colIndicatorValue}</p> : null}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nclass Board extends React.Component {\n\trenderSquare(coord) {\n\t\tconst idx = coord.y * colNum + coord.x;\n\t\tconst piece = this.props.squares[coord.y][coord.x];\n\t\tconst doingEnPassantCoord = this.props.doingEnPassantCoord;\n\t\tconst doingEnPassantPiece = doingEnPassantCoord ? this.props.squares[doingEnPassantCoord.y][doingEnPassantCoord.x] : null;\n\t\tconst mayMove = this.props.mayMovePosition.some(ele => ele.y === coord.y && ele.x === coord.x);\n\t\tconst squareBackgroundColor = (doingEnPassantCoord && coord.x === doingEnPassantCoord.x && coord.y === doingEnPassantCoord.y) ? \"orange-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  (idx === this.props.tryToMove) ? \"yellow-square\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ((coord.y + coord.x)  % 2 === 0) ? \"black-square\" : \"white-square\";\n\t\tconst usingMask = (doingEnPassantCoord && coord.x === doingEnPassantCoord.x && Math.abs(coord.y - doingEnPassantCoord.y) < 4) ? \"light-mask\" :\n\t\t\t\t\t\t\t\t\t\t  (doingEnPassantCoord && (coord.x !== doingEnPassantCoord.x || coord.y !== doingEnPassantCoord.y)) ? \"dark-mask\" : null;\n\t\tconst stackImgSrc = (mayMove && piece && piece.pieceType) ? process.env.PUBLIC_URL + \"/circle.png\" :\n\t\t\t\t\t\t\t\t\t\t\t  (mayMove) ? process.env.PUBLIC_URL + \"/dot.png\" : \n\t\t\t\t\t\t\t\t\t\t\t  (usingMask) ? process.env.PUBLIC_URL + \"/\" + usingMask + \".png\" : null;\n\n\t\tconst pieceImgSrc = (usingMask === \"light-mask\" && squareBackgroundColor === \"orange-square\") ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-queen.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && Math.abs(coord.y - doingEnPassantCoord.y) === 1) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-knight.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && Math.abs(coord.y - doingEnPassantCoord.y) === 2) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-rock.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(usingMask === \"light-mask\" && Math.abs(coord.y - doingEnPassantCoord.y) === 3) ? process.env.PUBLIC_URL + \"/\" + doingEnPassantPiece.pieceColor + \"-bishop.png\" :\n\t\t\t\t\t\t\t\t\t\t\t\t(piece) ? process.env.PUBLIC_URL + \"/\" + piece.pieceColor + \"-\" + piece.pieceType + \".png\" : null;\n\n\t\tconst rowIndicatorValue = (coord.x === 0) ? rowNum - coord.y : null;\n\t\tconst colIndicatorValue = (coord.y === colNum - 1) ? String.fromCharCode(97 + coord.x) : null;\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tkey={idx}\n\t\t\t\tpieceImgSrc={pieceImgSrc}\n\t\t\t\tstackImgSrc={stackImgSrc}\n\t\t\t\tsquareBackgroundColor={squareBackgroundColor}\n\t\t\t\tmayMove={mayMove}\n\t\t\t\tusingMask={usingMask}\n\t\t\t\tonClick={() => this.props.onClick(coord)}\n\t\t\t\trowIndicatorValue={rowIndicatorValue}\n\t\t\t\tcolIndicatorValue={colIndicatorValue}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"board-container\">\n\t\t\t\t{[...Array(rowNum)].map((ele, y) =>\n\t\t\t\t\t<div className=\"board-row\" key={y}>\n\t\t\t\t\t\t{[...Array(colNum)].map((ele, x) => \n\t\t\t\t\t\t\tthis.renderSquare(Coord(y, x))\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsquares: getInitSquares(),\n\t\t\tnextColor: \"white\",\n\t\t\ttryToMove: null,\n\t\t\tmayMovePosition: [],\n\t\t\thistoryMove: [],\n\t\t\tdoingEnPassantCoord: null,\n\t\t};\n\t}\n\n\thandleClick(coord) {\n\t\tlet squares = this.state.squares.map(arr => arr.slice());\n\t\tlet historyMove = this.state.historyMove.slice();\n\t\tlet doingEnPassantCoord = this.state.doingEnPassantCoord;\n\t\tlet tryToMove = this.state.tryToMove;\n\t\tlet mayMovePosition = [];\n\t\tif (doingEnPassantCoord) {\n\t\t\tif (Math.abs(doingEnPassantCoord.y - coord.y) >= 4 || doingEnPassantCoord.x !== coord.x) return;\n\n\t\t\tconsole.log(\"doing en passant\");\n\t\t\tsquares = squares[doingEnPassantCoord.y][doingEnPassantCoord.x].updateSquaresUsingEnPassant(squares, doingEnPassantCoord, coord);\n\n\t\t\t// historyMove.push({\n\t\t\t// \t\"startPos\": tryToMove,\n\t\t\t// \t\"endPos\": coord,\n\t\t\t// \t\"piece\": squares[coord.y][coord.x],\n\t\t\t// });\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tdoingEnPassantCoord: null\n\t\t\t});\n\t\t} else if (tryToMove && (this.state.mayMovePosition.some(ele => ele.y === coord.y && ele.x === coord.x))) {\n\t\t\tsquares = squares[tryToMove.y][tryToMove.x].updateSquares(squares, tryToMove, coord);\n\n\t\t\thistoryMove.push({\n\t\t\t\t\"startPos\": tryToMove,\n\t\t\t\t\"endPos\": coord,\n\t\t\t\t\"piece\": squares[coord.y][coord.x],\n\t\t\t});\n\n\t\t\tif (squares[coord.y][coord.x].tryToEnPassant(coord)) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tdoingEnPassantCoord: coord\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tsquares: squares,\n\t\t\t\tnextColor: (this.state.nextColor === \"black\" ? \"white\" : \"black\"),\n\t\t\t\thistoryMove: historyMove,\n\t\t\t});\n\n\n\t\t} else if (squares[coord.y][coord.x] && squares[coord.y][coord.x].pieceColor === this.state.nextColor) {\n\t\t\ttryToMove = coord;\n\t\t\tmayMovePosition = squares[coord.y][coord.x].getCanMovePosition(coord, squares, historyMove[historyMove.length - 1]);\n\t\t}\n\n\t\tthis.setState({\n\t\t\ttryToMove: tryToMove,\n\t\t\tmayMovePosition: mayMovePosition,\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\tsquares={this.state.squares}\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\n\t\t\t\t\t\ttryToMove={this.state.tryToMove}\n\t\t\t\t\t\tmayMovePosition={this.state.mayMovePosition}\n\t\t\t\t\t\tdoingEnPassantCoord={this.state.doingEnPassantCoord}\n\t\t\t\t\t/>\n\t\t\t\t\t{/*<Indicator\n\t\t\t\t\t\tsquares={[...Array(rowNum)].map((ele, idx) => idx)}\n\t\t\t\t\t/>*/}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}